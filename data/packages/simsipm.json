{
    "name": "simsipm",
    "aliases": [],
    "versions": [
        {
            "name": "1.2.4",
            "sha256": "1c633bebb19c490b5e6dfa5ada4a6bc7ec36348237c2626d57843a25af923211"
        }
    ],
    "latest_version": "1.2.4",
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "name": "+ipo",
            "spec": "^cmake@:3.8",
            "description": "+ipo is not supported by CMake < 3.9"
        }
    ],
    "variants": [
        {
            "name": "build_type",
            "default": "RelWithDebInfo",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "python",
            "default": false,
            "description": "Build pybind11-based python bindings"
        },
        {
            "name": "openmp",
            "default": false,
            "description": "Use OpenMP"
        }
    ],
    "homepage": "https://github.com/EdoPro98/SimSiPM/",
    "maintainers": [
        "vvolkl"
    ],
    "patches": [],
    "resources": [],
    "description": "SimSiPM is a simple and easy to use C++ library providing a set of\nobject-oriented tools with all the functionality needed to describe and\nsimulate Silicon PhotonMultipliers (SiPM) sensors.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pybind11",
            "description": "pybind11 -- Seamless operability between C++11 and Python. pybind11 is a\nlightweight header-only library that exposes C++ types in Python and\nvice versa, mainly to create Python bindings of existing C++ code. Its\ngoals and syntax are similar to the excellent Boost.Python library by\nDavid Abrahams: to minimize boilerplate code in traditional extension\nmodules by inferring type information using compile-time introspection."
        }
    ],
    "dependent_to": []
}