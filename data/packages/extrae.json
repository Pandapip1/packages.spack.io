{
    "name": "extrae",
    "aliases": [],
    "versions": [
        {
            "name": "4.0.6",
            "sha256": "b5060336cac57f1345faa09009b1940edf1e6991aae05cc10d0b714d31360a92"
        },
        {
            "name": "4.0.5",
            "sha256": "8f5eefa95f2e94a3b5f9b7f7cbaaed523862f190575ee797113b1e97deff1586"
        },
        {
            "name": "4.0.4",
            "sha256": "003bede870de6d88b705c1a13eabe63b6beb928d8f389f5dd70ca5db8450a1f9"
        },
        {
            "name": "4.0.3",
            "sha256": "b5139a07dbb1f4aa9758c1d62d54e42c01125bcfa9aa0cb9ee4f863afae93db1"
        },
        {
            "name": "3.8.3",
            "sha256": "c3bf27fb6f18e66200e40a0b4c35bc257766e5c1a525dc5725f561879e88bf32"
        },
        {
            "name": "3.7.1",
            "sha256": "c83ddd18a380c9414d64ee5de263efc6f7bac5fe362d5b8374170c7f18360378"
        },
        {
            "name": "3.4.1",
            "sha256": "77bfec16d6b5eee061fbaa879949dcef4cad28395d6a546b1ae1b9246f142725"
        }
    ],
    "latest_version": "4.0.6",
    "build_system": "AutotoolsPackage",
    "conflicts": [
        {
            "name": "arch=windows-None-None",
            "spec": "build_system=autotools",
            "description": null
        },
        {
            "name": "+cupti",
            "spec": "~cuda",
            "description": "extrae: CUPTI requires CUDA"
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "autotools",
            "description": "Build systems supported by the package"
        },
        {
            "name": "dyninst",
            "default": false,
            "description": "Use dyninst for dynamic code installation"
        },
        {
            "name": "papi",
            "default": true,
            "description": "Use PAPI to collect performance counters"
        },
        {
            "name": "cuda",
            "default": false,
            "description": "Enable support for tracing CUDA"
        },
        {
            "name": "cupti",
            "default": false,
            "description": "Enable CUPTI support"
        }
    ],
    "homepage": "https://tools.bsc.es/extrae",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "Extrae is the package devoted to generate tracefiles which can be\nanalyzed later by Paraver. Extrae is a tool that uses different\ninterposition mechanisms to inject probes into the target application so\nas to gather information regarding the application performance. The\nExtrae instrumentation package can instrument the MPI programin model,\nand the following parallel programming models either alone or in\nconjunction with MPI : OpenMP, CUDA, OpenCL, pthread, OmpSs\n",
    "dependencies": [
        {
            "name": "autoconf",
            "description": "Autoconf -- system configuration part of autotools"
        },
        {
            "name": "automake",
            "description": "Automake -- make file builder part of autotools"
        },
        {
            "name": "binutils",
            "description": "GNU binutils, which contain the linker, assembler, objdump and others"
        },
        {
            "name": "boost",
            "description": "Boost provides free peer-reviewed portable C++ source libraries,\nemphasizing libraries that work well with the C++ Standard Library.\nBoost libraries are intended to be widely useful, and usable across a\nbroad spectrum of applications. The Boost license encourages both\ncommercial and non-commercial use."
        },
        {
            "name": "cuda",
            "description": "CUDA is a parallel computing platform and programming model invented by\nNVIDIA. It enables dramatic increases in computing performance by\nharnessing the power of the graphics processing unit (GPU). Note: This\npackage does not currently install the drivers necessary to run CUDA.\nThese will need to be installed manually. See:\nhttps://docs.nvidia.com/cuda/ for details."
        },
        {
            "name": "dyninst",
            "description": "API for dynamic binary instrumentation. Modify programs while they are\nexecuting without recompiling, re-linking, or re-executing."
        },
        {
            "name": "elf",
            "description": "elfutils is a collection of various binary tools such as eu-objdump, eu-\nreadelf, and other utilities that allow you to inspect and manipulate\nELF files. Refer to Table 5.Tools Included in elfutils for Red Hat\nDeveloper for a complete list of binary tools that are distributed with\nthe Red Hat Developer Toolset version of elfutils."
        },
        {
            "name": "gettext",
            "description": "GNU internationalization (i18n) and localization (l10n) library."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "gnuconfig",
            "description": "The GNU config.guess and config.sub scripts versioned by timestamp.\nThis package can be used as a build dependency for autotools packages\nthat ship a tarball with outdated config.guess and config.sub files."
        },
        {
            "name": "libdwarf",
            "description": "The DWARF Debugging Information Format is of interest to programmers\nworking on compilers and debuggers (and any one interested in reading or\nwriting DWARF information). It was developed by a committee (known as\nthe PLSIG at the time) starting around 1991. Starting around 1991 SGI\ndeveloped the libdwarf and dwarfdump tools for internal use and as part\nof SGI IRIX developer tools. Since that time dwarfdump and libdwarf have\nbeen shipped (as an executable and archive respectively, not source)\nwith every release of the SGI MIPS/IRIX C compiler."
        },
        {
            "name": "libtool",
            "description": "libtool -- library building part of autotools."
        },
        {
            "name": "libunwind",
            "description": "A portable and efficient C programming interface (API) to determine the\ncall-chain of a program."
        },
        {
            "name": "libxml2",
            "description": "Libxml2 is the XML C parser and toolkit developed for the Gnome project\n(but usable outside of the Gnome platform), it is free software\navailable under the MIT License."
        },
        {
            "name": "m4",
            "description": "GNU M4 is an implementation of the traditional Unix macro processor."
        },
        {
            "name": "mpi",
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications."
        },
        {
            "name": "numactl",
            "description": "NUMA support for Linux"
        },
        {
            "name": "papi",
            "description": "PAPI provides the tool designer and application engineer with a\nconsistent interface and methodology for use of the performance counter\nhardware found in most major microprocessors. PAPI enables software\nengineers to see, in near real time, the relation between software\nperformance and processor events. In addition Component PAPI provides\naccess to a collection of components that expose performance measurement\nopportunities across the hardware and software stack."
        }
    ],
    "dependent_to": [
        {
            "name": "ompss-2",
            "description": "OmpSs-2 is a data-flow shared-memory programming model based on source\nannotations. It is developed by the Barcelona Supercomputing Center as a\nsuccessor to the StarSs and OmpSs programming models."
        },
        {
            "name": "ompss",
            "description": "OmpSs is an effort to integrate features from the StarSs programming\nmodel developed by BSC into a single programming model. In particular,\nour objective is to extend OpenMP with new directives to support\nasynchronous parallelism and heterogeneity (devices like GPUs). However,\nit can also be understood as new directives extending other accelerator\nbased APIs like CUDA or OpenCL. Our OmpSs environment is built on top of\nour Mercurium compiler and Nanos++ runtime system."
        }
    ]
}