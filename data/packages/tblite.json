{
    "name": "tblite",
    "aliases": [],
    "versions": [
        {
            "name": "0.3.0",
            "sha256": "46d77c120501ac55ed6a64dea8778d6593b26fb0653c591f8e8c985e35884f0a"
        }
    ],
    "latest_version": "0.3.0",
    "build_system": "MesonPackage",
    "conflicts": [
        {
            "name": "^python@3.12:",
            "spec": "build_system=meson ^meson@:1.0",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "meson",
            "description": "Build systems supported by the package"
        },
        {
            "name": "buildtype",
            "default": "release",
            "description": "Meson build type"
        },
        {
            "name": "default_library",
            "default": "shared",
            "description": "Build shared libs, static libs or both"
        },
        {
            "name": "strip",
            "default": false,
            "description": "Strip targets on install"
        },
        {
            "name": "openmp",
            "default": true,
            "description": "Use OpenMP parallelisation"
        },
        {
            "name": "python",
            "default": false,
            "description": "Build Python extension module"
        }
    ],
    "homepage": "https://tblite.readthedocs.io",
    "maintainers": [
        "awvwgk"
    ],
    "patches": [],
    "resources": [],
    "description": "Light-weight tight-binding framework\n",
    "dependencies": [
        {
            "name": "meson",
            "description": "Meson is a portable open source build system meant to be both extremely\nfast, and as user friendly as possible."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        },
        {
            "name": "blas",
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications."
        },
        {
            "name": "dftd4",
            "description": "Generally Applicable Atomic-Charge Dependent London Dispersion\nCorrection"
        },
        {
            "name": "lapack",
            "description": "libFLAME (AMD Optimized version) is a portable library for dense matrix\ncomputations, providing much of the functionality present in Linear\nAlgebra Package (LAPACK). It includes a compatibility layer, FLAPACK,\nwhich includes complete LAPACK implementation. The library provides\nscientific and numerical computing communities with a modern, high-\nperformance dense linear algebra library that is extensible, easy to\nuse, and available under an open source license. libFLAME is a C-only\nimplementation and does not depend on any external FORTRAN libraries\nincluding LAPACK. There is an optional backward compatibility layer,\nlapack2flame that maps LAPACK routine invocations to their corresponding\nnative C implementations in libFLAME. This allows legacy applications to\nstart taking advantage of libFLAME with virtually no changes to their\nsource code. In combination with BLIS library which includes\noptimizations for the AMD EPYC processor family, libFLAME enables\nrunning high performing LAPACK functionalities on AMD platform.\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL-libFLAME\nlicense agreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/dense/eula-\nlibflame/libflame-4-1-eula.html\nhttps://www.amd.com/en/developer/aocl/dense/eula-libflame/libflame-\neula.html"
        },
        {
            "name": "mctc-lib",
            "description": "Modular computation toolchain library for quantum chemistry file IO"
        },
        {
            "name": "pkgconfig",
            "description": "pkg-config is a helper tool used when compiling applications and\nlibraries"
        },
        {
            "name": "py-cffi",
            "description": "Foreign Function Interface for Python calling C code"
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "simple-dftd3",
            "description": "Simple reimplementation of the DFT-D3 dispersion correction"
        },
        {
            "name": "toml-f",
            "description": "TOML parser implementation for data serialization and deserialization\nin Fortran"
        }
    ],
    "dependent_to": [
        {
            "name": "xtb",
            "description": "Semiempirical extended tight binding program package"
        }
    ]
}