{
    "name": "py-mpi4py",
    "aliases": [],
    "versions": [
        {
            "name": "master",
            "branch": "master"
        },
        {
            "name": "3.1.5",
            "sha256": "a706e76db9255135c2fb5d1ef54cb4f7b0e4ad9e33cbada7de27626205f2a153"
        },
        {
            "name": "3.1.4",
            "sha256": "17858f2ebc623220d0120d1fa8d428d033dde749c4bc35b33d81a66ad7f93480"
        },
        {
            "name": "3.1.3",
            "sha256": "f1e9fae1079f43eafdd9f817cdb3fd30d709edc093b5d5dada57a461b2db3008"
        },
        {
            "name": "3.1.2",
            "sha256": "40dd546bece8f63e1131c3ceaa7c18f8e8e93191a762cd446a8cfcf7f9cce770"
        },
        {
            "name": "3.1.1",
            "sha256": "e11f8587a3b93bb24c8526addec664b586b965d83c0882b884c14dc3fd6b9f5c"
        },
        {
            "name": "3.1.0",
            "sha256": "134fa2b2fe6d8f91bcfcc2824cfd74b55ca3dcbff4d185b1bda009beea9232ec"
        },
        {
            "name": "3.0.3",
            "sha256": "012d716c8b9ed1e513fcc4b18e5af16a8791f51e6d1716baccf988ad355c5a1f"
        },
        {
            "name": "3.0.1",
            "sha256": "6549a5b81931303baf6600fa2e3bc04d8bd1d5c82f3c21379d0d64a9abcca851"
        },
        {
            "name": "3.0.0",
            "sha256": "b457b02d85bdd9a4775a097fac5234a20397b43e073f14d9e29b6cd78c68efd7"
        },
        {
            "name": "2.0.0",
            "sha256": "6543a05851a7aa1e6d165e673d422ba24e45c41e4221f0993fe1e5924a00cb81"
        },
        {
            "name": "1.3.1",
            "sha256": "e7bd2044aaac5a6ea87a87b2ecc73b310bb6efe5026031e33067ea3c2efc3507"
        }
    ],
    "latest_version": "3.1.5",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://pypi.org/project/mpi4py/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "This package provides Python bindings for the Message Passing Interface\n(MPI) standard. It is implemented on top of the MPI-1/MPI-2\nspecification and exposes an API which grounds on the standard MPI-2 C++\nbindings.\n",
    "dependencies": [
        {
            "name": "mpi",
            "description": "An open source Message Passing Interface implementation. The Open MPI\nProject is an open source Message Passing Interface implementation that\nis developed and maintained by a consortium of academic, research, and\nindustry partners. Open MPI is therefore able to combine the expertise,\ntechnologies, and resources from all across the High Performance\nComputing community in order to build the best MPI library available.\nOpen MPI offers advantages for system and software vendors, application\ndevelopers and computer science researchers."
        },
        {
            "name": "py-cython",
            "description": "The Cython compiler for writing C extensions for the Python language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        }
    ],
    "dependent_to": [
        {
            "name": "py-mpi4jax",
            "description": "Zero-copy MPI communication of JAX arrays, for turbo-charged HPC\napplications in Python."
        },
        {
            "name": "py-netket",
            "description": "NetKet is an open-source project, delivering cutting-edge methods for\nthe study of many-body quantum systems with artificial neural networks\nand machine learning techniques."
        },
        {
            "name": "py-adios",
            "description": "NumPy bindings of ADIOS1"
        },
        {
            "name": "neuron",
            "description": "NEURON is a simulation environment for single and networks of neurons.\nNEURON is a simulation environment for modeling individual and networks\nof neurons. NEURON models individual neurons via the use of sections\nthat are automatically subdivided into individual compartments, instead\nof requiring the user to manually create compartments."
        },
        {
            "name": "py-pymumps",
            "description": "Python bindings for MUMPS, a parallel sparse direct solver"
        },
        {
            "name": "py-anuga",
            "description": "ANUGA (pronounced \"AHnooGAH\") is open-source software for the simulation\nof the shallow water equation, in particular it can be used to model\ntsunamis and floods."
        },
        {
            "name": "py-netcdf4",
            "description": "Python interface to the netCDF Library."
        },
        {
            "name": "openpmd-api",
            "description": "C++ & Python API for Scientific I/O"
        },
        {
            "name": "py-dask-mpi",
            "description": "Deploying Dask using MPI4Py."
        },
        {
            "name": "paraview",
            "description": "ParaView is an open-source, multi-platform data analysis and\nvisualization application. This package includes the Catalyst in-situ\nlibrary for versions 5.7 and greater, otherwise use the catalyst\npackage."
        },
        {
            "name": "py-amrex",
            "description": "AMReX Python Bindings with pybind11"
        },
        {
            "name": "heffte",
            "description": "Highly Efficient FFT for Exascale"
        },
        {
            "name": "cosmoflow-benchmark",
            "description": "This is a an implementation of the CosmoFlow 3D convolutional neural\nnetwork for benchmarking. It is written in TensorFlow with the Keras API\nand uses Horovod for distributed training."
        },
        {
            "name": "py-h5py",
            "description": "The h5py package provides both a high- and low-level interface to the\nHDF5 library from Python."
        },
        {
            "name": "py-fenics-dolfinx",
            "description": "Python interface to the next generation FEniCS problem solving\nenvironment"
        },
        {
            "name": "py-topiary-asr",
            "description": "Python framework for doing ancestral sequence reconstruction."
        },
        {
            "name": "py-warpx",
            "description": "WarpX is an advanced electromagnetic Particle-In-Cell code. It supports\nmany features including Perfectly-Matched Layers (PML) and mesh\nrefinement. In addition, WarpX is a highly-parallel and highly-optimized\ncode and features hybrid OpenMP/MPI parallelization, advanced\nvectorization techniques and load balancing capabilities. These are the\nPython bindings of WarpX with PICMI input support. See the C++ 'warpx'\npackage for the WarpX application and library."
        },
        {
            "name": "ascent",
            "description": "Ascent is an open source many-core capable lightweight in situ\nvisualization and analysis infrastructure for multi-physics HPC\nsimulations."
        },
        {
            "name": "mlperf-deepcam",
            "description": "PyTorch implementation for the climate segmentation benchmark, based on\nthe Exascale Deep Learning for Climate Analytics"
        },
        {
            "name": "henson",
            "description": "Cooperative multitasking for in situ processing."
        },
        {
            "name": "meep",
            "description": "Meep (or MEEP) is a free finite-difference time-domain (FDTD) simulation\nsoftware package developed at MIT to model electromagnetic systems."
        },
        {
            "name": "libpressio",
            "description": "A generic abstraction for the compression of dense tensors"
        },
        {
            "name": "trilinos",
            "description": "The Trilinos Project is an effort to develop algorithms and enabling\ntechnologies within an object-oriented software framework for the\nsolution of large-scale, complex multi-physics engineering and\nscientific problems. A unique design feature of Trilinos is its focus on\npackages."
        },
        {
            "name": "py-gmxapi",
            "description": "Python bindings and ensemble workflow management for GROMACS. The\nGROMACS C++ API is affected by its package variants. You can specify a\nparticular GROMACS API by making the dependency variant explicit. E.g.\n``spack install gmxapi ^gromacs+mpi~double``"
        },
        {
            "name": "conduit",
            "description": "Conduit is an open source project from Lawrence Livermore National\nLaboratory that provides an intuitive model for describing hierarchical\nscientific data in C++, C, Fortran, and Python. It is used for data\ncoupling between packages in-core, serialization, and I/O tasks."
        },
        {
            "name": "adios2",
            "description": "The Adaptable Input Output System version 2, developed in the Exascale\nComputing Program"
        },
        {
            "name": "candle-benchmarks",
            "description": "ECP-CANDLE Benchmarks"
        },
        {
            "name": "py-libensemble",
            "description": "Library for managing ensemble-like collections of computations."
        },
        {
            "name": "py-ytopt",
            "description": "Ytopt package implements search using Random Forest (SuRF), an\nautotuning search method developed within Y-Tune ECP project."
        },
        {
            "name": "sensei",
            "description": "SENSEI is a platform for scalable in-situ analysis and visualization.\nIts design motto is \"Write once, run everywhere\", this means that once\nthe application is instrumented with SENSEI it can use existing and\nfuture analysis backends. Existing backends include: Paraview/Catalyst,\nVisit/Libsim, ADIOS, Python scripts, and so on."
        },
        {
            "name": "py-chainer",
            "description": "Chainer is a Python-based deep learning framework aiming at\nflexibility. It provides automatic differentiation APIs based on the\ndefine-by-run approach (a.k.a. dynamic computational graphs) as well as\nobject-oriented high-level APIs to build and train neural networks. It\nalso supports CUDA/cuDNN using CuPy for high performance training and\ninference."
        },
        {
            "name": "octopus",
            "description": "A real-space finite-difference (time-dependent) density-functional\ntheory code."
        },
        {
            "name": "py-abcpy",
            "description": "ABCpy is a highly modular, scientific library for approximate Bayesian\ncomputation (ABC) written in Python. It is designed to run all included\nABC algorithms in parallel, either using multiple cores of a single\ncomputer or using an Apache Spark or MPI enabled cluster."
        },
        {
            "name": "vtk",
            "description": "The Visualization Toolkit (VTK) is an open-source, freely available\nsoftware system for 3D computer graphics, image processing and\nvisualization."
        },
        {
            "name": "exago",
            "description": "ExaGO is a package for solving large-scale power grid optimization\nproblems on parallel and distributed architectures, particularly\ntargeted for exascale machines."
        },
        {
            "name": "su2",
            "description": "SU2 is a suite of open-source software tools written in C++ for the\nnumerical solution of partial differential equations (PDE) and\nperforming PDE constrained optimization."
        },
        {
            "name": "cradl",
            "description": "The CRADL proxy application captured performance metrics during\ninference on data from multiphysics codes, specifically ALE\nhydrodynamics codes."
        },
        {
            "name": "py-psana",
            "description": "LCLS II Developement: PSAna Python."
        },
        {
            "name": "py-openmc",
            "description": "OpenMC is a community-developed Monte Carlo neutron and photon transport\nsimulation code. It is capable of performing fixed source, k-eigenvalue,\nand subcritical multiplication calculations on models built using either\na constructive solid geometry or CAD representation. OpenMC supports\nboth continuous-energy and multigroup transport. The continuous-energy\nparticle interaction data is based on a native HDF5 format that can be\ngenerated from ACE files produced by NJOY. Parallelism is enabled via a\nhybrid MPI and OpenMP programming model."
        },
        {
            "name": "py-uvw",
            "description": "UVW is a small utility library to write VTK files from data contained\nin Numpy arrays."
        },
        {
            "name": "sirius",
            "description": "Domain specific library for electronic structure calculations"
        },
        {
            "name": "steps",
            "description": "STochastic Engine for Pathway Simulation"
        },
        {
            "name": "py-espressopp",
            "description": "ESPResSo++ is an extensible, flexible, fast and parallel simulation\nsoftware for soft matter research. It is a highly versatile software\npackage for the scientific simulation and analysis of coarse-grained\natomistic or bead-spring models as they are used in soft matter research"
        },
        {
            "name": "lammps",
            "description": "LAMMPS stands for Large-scale Atomic/Molecular Massively Parallel\nSimulator."
        },
        {
            "name": "arbor",
            "description": "Arbor is a high-performance library for computational neuroscience\nsimulations."
        },
        {
            "name": "py-melissa-core",
            "description": "Melissa is a file-avoiding, adaptive, fault-tolerant and elastic\nframework, to run large-scale sensitivity analysis or deep-surrogate\ntraining on supercomputers. This package builds the launcher and server\nmodules."
        },
        {
            "name": "py-pyprecice",
            "description": "This package provides python language bindings for the C++ library\npreCICE."
        },
        {
            "name": "timemory",
            "description": "Modular profiling toolkit and suite of libraries and tools for\nC/C++/Fortran/CUDA/Python"
        },
        {
            "name": "py-devito",
            "description": "Devito is a Python package to implement optimized stencil computation.\n(e.g., finite differences, image processing, machine learning) from\nhigh-level symbolic problem definitions. Devito builds on SymPy and\nemploys automated code generation and just-in-time compilation to\nexecute optimized computational kernels on several computer platforms,\nincluding CPUs, GPUs, and clusters thereof."
        },
        {
            "name": "gptune",
            "description": "GPTune is an autotuning framework that relies on multitask and transfer\nlearnings to help solve the underlying black-box optimization problem\nusing Bayesian optimization methodologies."
        },
        {
            "name": "py-heat",
            "description": "Heat is a flexible and seamless open-source software for high\nperformance data analytics and machine learning. It provides highly\noptimized algorithms and data structures for tensor computations using\nCPUs, GPUs and distributed cluster systems on top of MPI."
        },
        {
            "name": "py-pyfr",
            "description": "PyFR is an open-source Python based framework for solving advection-\ndiffusion type problems on streaming architectures using the Flux\nReconstruction approach of Huynh."
        },
        {
            "name": "py-petsc4py",
            "description": "This package provides Python bindings for the PETSc package."
        },
        {
            "name": "py-pynucleus",
            "description": "PyNucleus is a finite element code that specifically targets nonlocal\noperators."
        },
        {
            "name": "py-meldmd",
            "description": "MELD is a tool for inferring the structure of biomolecules from sparse,\nambiguous, or noisy data."
        },
        {
            "name": "py-exarl",
            "description": "A scalable software framework for reinforcement learning environments\nand agents/policies used for the Design and Control applications"
        },
        {
            "name": "damaris",
            "description": "Damaris is a middleware for I/O and in situ analytics targeting large-\nscale, MPI-based HPC simulations."
        }
    ]
}