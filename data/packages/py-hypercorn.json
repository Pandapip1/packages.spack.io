{
    "name": "py-hypercorn",
    "aliases": [],
    "versions": [
        {
            "name": "0.13.2",
            "sha256": "6307be5cbdf6ba411967d4661202dc4f79bd511b5d318bc4eed88b09418427f8"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://gitlab.com/pgjones/hypercorn/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "A ASGI Server based on Hyper libraries and inspired by Gunicorn.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "py-poetry-core",
            "description": "Poetry PEP 517 Build Backend."
        },
        {
            "name": "py-h11",
            "description": "A pure-Python, bring-your-own-I/O implementation of HTTP/1.1"
        },
        {
            "name": "py-h2",
            "description": "HTTP/2 State-Machine based protocol implementation"
        },
        {
            "name": "py-priority",
            "description": "Priority is a pure-Python implementation of the priority logic for\nHTTP/2, set out in RFC 7540 Section 5.3 (Stream Priority). This logic\nallows for clients to express a preference for how the server allocates\nits (limited) resources to the many outstanding HTTP requests that may\nbe running over a single HTTP/2 connection."
        },
        {
            "name": "py-toml",
            "description": "A Python library for parsing and creating TOML configuration files. For\nmore information on the TOML standard, see https://github.com/toml-\nlang/toml.git"
        },
        {
            "name": "py-wsproto",
            "description": "This repository contains a pure-Python implementation of a WebSocket\nprotocol stack. It's written from the ground up to be embeddable in\nwhatever program you choose to use, ensuring that you can communicate\nvia WebSockets, as defined in RFC6455, regardless of your programming\nparadigm."
        },
        {
            "name": "py-typing-extensions",
            "description": "The typing_extensions module contains both backports of these changes as\nwell as experimental types that will eventually be added to the typing\nmodule, such as Protocol (see PEP 544 for details about protocols and\nstatic duck typing)."
        }
    ],
    "dependent_to": [
        {
            "name": "py-quart",
            "description": "A Python ASGI web microframework with the same API as Flask."
        }
    ]
}