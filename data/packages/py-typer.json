{
    "name": "py-typer",
    "aliases": [],
    "versions": [
        {
            "name": "0.9.0",
            "sha256": "50922fd79aea2f4751a8e0408ff10d2662bd0c8bbfa84755a699f3bada2978b2"
        },
        {
            "name": "0.7.0",
            "sha256": "ff797846578a9f2a201b53442aedeb543319466870fbe1c701eab66dd7681165"
        }
    ],
    "latest_version": "0.9.0",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://github.com/tiangolo/typer",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "Typer, build great CLIs. Easy to code. Based on Python type hints.\n",
    "dependencies": [
        {
            "name": "py-click",
            "description": "Python composable command line interface toolkit."
        },
        {
            "name": "py-flit-core",
            "description": "Distribution-building parts of Flit."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-typing-extensions",
            "description": "The typing_extensions module contains both backports of these changes as\nwell as experimental types that will eventually be added to the typing\nmodule, such as Protocol (see PEP 544 for details about protocols and\nstatic duck typing)."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "python-venv",
            "description": "A Spack managed Python virtual environment"
        }
    ],
    "dependent_to": [
        {
            "name": "py-earth2mip",
            "description": "Earth-2 Model Intercomparison Project (MIP). A python framework that\nenables climate researchers and scientists to explore and experiment\nwith AI models for weather and climate."
        },
        {
            "name": "neic-finitefault",
            "description": "Wavelet and simulated Annealing SliP inversion (WASP). This code uses a\nnonlinear simulated annealing inversion method to model slip amplitude,\nrake, rupture time, and rise time on a discretized fault plane, finding\nthe solution that best fits the observations in the wavelet domain."
        },
        {
            "name": "py-hail",
            "description": "Cloud-native genomic dataframes and batch computing (Python API)"
        },
        {
            "name": "py-pathy",
            "description": "pathlib.Path subclasses for local and cloud bucket storage"
        }
    ]
}