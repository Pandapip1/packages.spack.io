{
    "name": "py-meshpy",
    "aliases": [],
    "versions": [
        {
            "name": "2022.1.3",
            "sha256": "a7158e31ece25fa6c6cebce9fd1e968157d661dc8769fb30ceba69c351478475"
        }
    ],
    "latest_version": "2022.1.3",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://documen.tician.de/meshpy/",
    "maintainers": [
        "adamjstewart",
        "cgcgcg"
    ],
    "patches": [],
    "resources": [],
    "description": "Simplicial Mesh Generation from Python\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-pybind11",
            "description": "pybind11 -- Seamless operability between C++11 and Python. pybind11 is a\nlightweight header-only library that exposes C++ types in Python and\nvice versa, mainly to create Python bindings of existing C++ code. Its\ngoals and syntax are similar to the excellent Boost.Python library by\nDavid Abrahams: to minimize boilerplate code in traditional extension\nmodules by inferring type information using compile-time introspection."
        },
        {
            "name": "py-pytools",
            "description": "A collection of tools for Python"
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-gmsh-interop",
            "description": "Interoperability between Python and Gmsh"
        }
    ],
    "dependent_to": [
        {
            "name": "py-pynucleus",
            "description": "PyNucleus is a finite element code that specifically targets nonlocal\noperators."
        }
    ]
}