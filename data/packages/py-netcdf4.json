{
    "name": "py-netcdf4",
    "aliases": [],
    "versions": [
        {
            "name": "1.5.8",
            "sha256": "ca3d468f4812c0999df86e3f428851fb0c17ac34ce0827115c246b0b690e4e84"
        },
        {
            "name": "1.5.3",
            "sha256": "2a3ca855848f4bbf07fac366da77a681fcead18c0a8813d91d46302f562dc3be"
        },
        {
            "name": "1.4.2",
            "sha256": "b934af350459cf9041bcdf5472e2aa56ed7321c018d918e9f325ec9a1f9d1a30"
        }
    ],
    "latest_version": "1.5.8",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        },
        {
            "name": "mpi",
            "default": true,
            "description": "Parallel IO support"
        }
    ],
    "homepage": "https://github.com/Unidata/netcdf4-python",
    "maintainers": [
        "skosukhin"
    ],
    "patches": [
        {
            "owner": "builtin.py-netcdf4",
            "sha256": "255b5ae328c6b2b293a59d7eb8934f861f265eba770c6a37411222d161e84171",
            "level": 1,
            "working_dir": ".",
            "relative_path": "disable_pkgconf.patch",
            "version": ""
        }
    ],
    "resources": [],
    "description": "Python interface to the netCDF Library.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-cython",
            "description": "The Cython compiler for writing C extensions for the Python language."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-cftime",
            "description": "Python library for decoding time units and variable values in a netCDF\nfile conforming to the Climate and Forecasting (CF) netCDF conventions"
        },
        {
            "name": "py-mpi4py",
            "description": "This package provides Python bindings for the Message Passing Interface\n(MPI) standard. It is implemented on top of the MPI-1/MPI-2\nspecification and exposes an API which grounds on the standard MPI-2 C++\nbindings."
        },
        {
            "name": "netcdf-c",
            "description": "NetCDF (network Common Data Form) is a set of software libraries and\nmachine-independent data formats that support the creation, access, and\nsharing of array-oriented scientific data. This is the C distribution."
        },
        {
            "name": "hdf5",
            "description": "HDF5 is a data model, library, and file format for storing and managing\ndata. It supports an unlimited variety of datatypes, and is designed for\nflexible and efficient I/O and for high volume and complex data."
        }
    ],
    "dependent_to": [
        {
            "name": "py-arviz",
            "description": "ArviZ (pronounced \"AR-vees\") is a Python package for exploratory\nanalysis of Bayesian models. Includes functions for posterior analysis,\nmodel checking, comparison and diagnostics."
        },
        {
            "name": "py-meldmd",
            "description": "MELD is a tool for inferring the structure of biomolecules from sparse,\nambiguous, or noisy data."
        },
        {
            "name": "py-abipy",
            "description": "Python package to automate ABINIT calculations and analyze the results."
        },
        {
            "name": "py-cdo",
            "description": "The cdo package provides an interface to the Climate Data Operators from\nPython."
        },
        {
            "name": "py-datacube",
            "description": "An analysis environment for satellite and other earth observation data."
        },
        {
            "name": "py-anuga",
            "description": "ANUGA (pronounced \"AHnooGAH\") is open-source software for the simulation\nof the shallow water equation, in particular it can be used to model\ntsunamis and floods."
        },
        {
            "name": "py-dxchange",
            "description": "DXchange provides an interface with tomoPy and raw tomographic data\ncollected at different synchrotron facilities."
        },
        {
            "name": "py-arm-pyart",
            "description": "Python ARM Radar Toolkit. A growing collection of weather radar\nalgorithms and utilities build on top of the Scientific Python stack and\ndistributed under the 3-Clause BSD license. Py-ART is used by the\nAtmospheric Radiation Measurement (ARM) Climate Research Facility for\nworking with data from a number of precipitation and cloud radars, but\nhas been designed so that it can be used by others in the radar and\natmospheric communities to examine, processes, and analyse data from\nmany types of weather radars."
        },
        {
            "name": "py-mdanalysis",
            "description": "MDAnalysis is a Python toolkit to analyze molecular dynamics\ntrajectories generated by a wide range of popular simulation packages\nincluding DL_Poly, CHARMM, Amber, NAMD, LAMMPS, and Gromacs. (See the\nlists of supported trajectory formats and topology formats.)"
        },
        {
            "name": "py-wradlib",
            "description": "wradlib is designed to assist you in the most important steps of\nprocessing weather radar data. These may include: reading common data\nformats, georeferencing, converting reflectivity to rainfall intensity,\nidentifying and correcting typical error sources (such as clutter or\nattenuation) and visualising the data."
        },
        {
            "name": "py-xarray",
            "description": "N-D labeled arrays and datasets in Python"
        },
        {
            "name": "py-pyugrid",
            "description": "Work with triangular unstructured grids and the data on them."
        }
    ]
}