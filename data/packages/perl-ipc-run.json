{
    "name": "perl-ipc-run",
    "aliases": [],
    "versions": [
        {
            "name": "20180523.0",
            "sha256": "3850d7edf8a4671391c6e99bb770698e1c45da55b323b31c76310913349b6c2f"
        }
    ],
    "latest_version": "20180523.0",
    "build_system": "PerlPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://metacpan.org/pod/IPC::Run",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "IPC::Run allows you to run and interact with child processes using\nfiles, pipes, and pseudo-ttys. Both system()-style and scripted usages\nare supported and may be mixed. Likewise, functional and OO API styles\nare both supported and may be mixed.\n",
    "dependencies": [
        {
            "name": "perl",
            "description": "Perl 5 is a highly capable, feature-rich programming language with over\n27 years of development."
        },
        {
            "name": "perl-io-tty",
            "description": "IO::Tty is used internally by IO::Pty to create a pseudo-tty. You\nwouldn't want to use it directly except to import constants, use\nIO::Pty. For a list of importable constants, see IO::Tty::Constant."
        },
        {
            "name": "perl-readonly",
            "description": "Readonly - Facility for creating read-only scalars, arrays, hashes"
        }
    ],
    "dependent_to": [
        {
            "name": "perl-bioperl",
            "description": "BioPerl is the product of a community effort to produce Perl code which\nis useful in biology. Examples include Sequence objects, Alignment\nobjects and database searching objects. These objects not only do what\nthey are advertised to do in the documentation, but they also interact -\nAlignment objects are made from the Sequence objects, Sequence objects\nhave access to Annotation and SeqFeature objects and databases, Blast\nobjects can be converted to Alignment objects, and so on. This means\nthat the objects provide a coordinated and extensible framework to do\ncomputational biology. BioPerl development focuses on Perl classes, or\ncode that is used to create objects representing biological entities.\nThere are scripts provided in the scripts/ and examples/ directories but\nscripts are not the main focus of the BioPerl developers. Of course, as\nthe objects do most of the hard work for you, all you have to do is\ncombine a number of objects together sensibly to make useful scripts.\nThe intent of the BioPerl development effort is to make reusable tools\nthat aid people in creating their own sites or job-specific\napplications. The BioPerl website at https://bioperl.org/ also attempts\nto maintain links and archives of standalone bio-related Perl tools that\nare not affiliated or related to the core BioPerl effort. Check the site\nfor useful code ideas and contribute your own if possible."
        }
    ]
}