{
    "name": "kaldi",
    "aliases": [],
    "versions": [
        {
            "name": "master"
        },
        {
            "name": "2019-09-29",
            "commit": "6ffde4b41c58de778245149690927d592cd5956a"
        },
        {
            "name": "2019-07-29",
            "commit": "7637de77e0a77bf280bef9bf484e4f37c4eb9475"
        },
        {
            "name": "2018-07-11",
            "commit": "6f2140b032b0108bc313eefdca65151289642773"
        },
        {
            "name": "2015-10-07",
            "commit": "c024e8aa0a727bf76c91a318f76a1f8b0b59249e"
        }
    ],
    "build_system": "Package",
    "conflicts": [],
    "variants": [
        {
            "name": "shared",
            "default": true,
            "description": "build shared libraries"
        },
        {
            "name": "double",
            "default": false,
            "description": "build with double precision floats"
        },
        {
            "name": "cuda",
            "default": false,
            "description": "build with CUDA"
        }
    ],
    "homepage": "https://github.com/kaldi-asr/kaldi",
    "maintainers": [],
    "patches": [
        {
            "owner": "builtin.kaldi",
            "sha256": "ad42de2a9d36ed692c9b984678ce2d640b44f786b938ba698a3ec921cb8b80fd",
            "level": 1,
            "working_dir": ".",
            "relative_path": "openfst-1.4.1.patch",
            "version": "@2015-10-07"
        },
        {
            "owner": "builtin.kaldi",
            "sha256": "135e90c24dbc72a0479d5edde24e6600d021d300334e47f271794c0843c6b053",
            "level": 1,
            "working_dir": ".",
            "relative_path": "fujitsu_fix_version_analysis.patch",
            "version": "@2018-07-11:%fj"
        }
    ],
    "resources": [],
    "description": "Kaldi is a toolkit for speech recognition written in C++ and licensed\nunder the Apache License v2.0. Kaldi is intended for use by speech\nrecognition researchers.\n",
    "dependencies": [
        {
            "name": "blas",
            "description": "XBLAS is a reference implementation for extra precision BLAS. XBLAS is a\nreference implementation for the dense and banded BLAS routines, along\nwith extended and mixed precision version. Extended precision is only\nused internally; input and output arguments remain the same as in the\nexisting BLAS. Extra precisions is implemented as double-double (i.e.,\n128-bit total, 106-bit significand). Mixed precision permits some\ninput/output arguments of different types (mixing real and complex) or\nprecisions (mixing single and double). This implementation is proof of\nconcept, and no attempt was made to optimize performance; performance\nshould be as good as straightforward but careful code written by hand."
        },
        {
            "name": "cuda",
            "description": "CUDA is a parallel computing platform and programming model invented by\nNVIDIA. It enables dramatic increases in computing performance by\nharnessing the power of the graphics processing unit (GPU). Note: This\npackage does not currently install the drivers necessary to run CUDA.\nThese will need to be installed manually. See:\nhttps://docs.nvidia.com/cuda/ for details."
        },
        {
            "name": "sph2pipe",
            "description": "Sph2pipe is a portable tool for converting SPHERE files to other\nformats."
        },
        {
            "name": "sctk",
            "description": "The NIST Scoring Toolkit (SCTK) is a collection of software tools\ndesigned to score benchmark test evaluations of Automatic Speech\nRecognition (ASR) Systems. The toolkit is currently used by NIST,\nbenchmark test participants, and reserchers worldwide to as a common\nscoring engine."
        },
        {
            "name": "speex",
            "description": "Speex is an Open Source/Free Software patent-free audio compression\nformat designed for speech."
        },
        {
            "name": "openfst",
            "description": "OpenFst is a library for constructing, combining, optimizing, and\nsearching weighted finite-state transducers (FSTs). Weighted finite-\nstate transducers are automata where each transition has an input label,\nan output label, and a weight."
        },
        {
            "name": "cub",
            "description": "CUB is a C++ header library of cooperative threadblock primitives and\nother utilities for CUDA kernel programming."
        }
    ],
    "dependent_to": [
        {
            "name": "cntk",
            "description": "The Microsoft Cognitive Toolkit is a unified deep-learning toolkit that\ndescribes neural networks as a series of computational steps via a\ndirected graph."
        }
    ]
}