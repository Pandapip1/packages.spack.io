{
    "name": "qmd-progress",
    "aliases": [],
    "versions": [
        {
            "name": "master",
            "branch": "master"
        },
        {
            "name": "1.2.0",
            "sha256": "d41708f0e9c12d0e421a9fa883f8b12478cf4faa7453703143f32c093626638e"
        },
        {
            "name": "1.1.0",
            "sha256": "757d2606d7b7f38e7f8f491bf7369b88de55062bae0b12a9928f0a5acae993bd"
        },
        {
            "name": "1.0.0",
            "sha256": "eed87e68b4a1533a3ed70c1662feca4ac890b985f3326fc94522c2f71f198fdc"
        }
    ],
    "latest_version": "1.2.0",
    "build_system": "CMakePackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "cmake",
            "description": "Build systems supported by the package"
        },
        {
            "name": "build_type",
            "default": "Release",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "generator",
            "default": "make",
            "description": "the build system generator to use"
        },
        {
            "name": "graphlib",
            "default": false,
            "description": "Build with Metis Suppport"
        },
        {
            "name": "mpi",
            "default": true,
            "description": "Build with MPI Support"
        },
        {
            "name": "shared",
            "default": true,
            "description": "Build shared libs"
        },
        {
            "name": "benchmarks",
            "default": true,
            "description": "Build with benchmark drivers"
        }
    ],
    "homepage": "https://qmd-progress.readthedocs.io/",
    "maintainers": [
        "jeanlucf22"
    ],
    "patches": [],
    "resources": [],
    "description": "PROGRESS: Parallel, Rapid O(N) and Graph-based Recursive Electronic\nStructure Solver. This library is focused on the development of general\nsolvers that are commonly used in quantum chemistry packages.\n",
    "dependencies": [
        {
            "name": "bml",
            "description": "The basic matrix library (bml) is an implementation of various matrix\ndata formats (dense and sparse) and their associated algorithms for\nbasic matrix operations used electronic structure solvers."
        },
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "metis",
            "description": "METIS is a set of serial programs for partitioning graphs, partitioning\nfinite element meshes, and producing fill reducing orderings for sparse\nmatrices. The algorithms implemented in METIS are based on the\nmultilevel recursive-bisection, multilevel k-way, and multi-constraint\npartitioning schemes."
        },
        {
            "name": "mpi",
            "description": "Cray/HPE packaging of MVAPICH2 for HPE Apollo systems"
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        }
    ],
    "dependent_to": [
        {
            "name": "latte",
            "description": "Open source density functional tight binding molecular dynamics."
        },
        {
            "name": "lcc",
            "description": "Los Alamos Crystal Cut (LCC) is a simple crystal builder. It is an easy-\nto-use and easy-to-develop code to make crystal solid/shape and slabs\nfrom a crystal lattice. Provided you have a \u2018.pdb\u2018 file containing your\nlattice basis you can create a solid or slab from command line."
        }
    ]
}