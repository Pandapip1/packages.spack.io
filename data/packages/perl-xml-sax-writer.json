{
    "name": "perl-xml-sax-writer",
    "aliases": [],
    "versions": [
        {
            "name": "0.57",
            "sha256": "3d61d07ef43b0126f5b4de4f415a256fa859fa88dc4fdabaad70b7be7c682cf0"
        }
    ],
    "latest_version": "0.57",
    "build_system": "PerlPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "https://metacpan.org/pod/XML::SAX::Writer",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "A new XML Writer was needed to match the SAX2 effort because quite\nnaturally no existing writer understood SAX2. My first intention had\nbeen to start patching XML::Handler::YAWriter as it had previously been\nmy favourite writer in the SAX1 world.\n",
    "dependencies": [
        {
            "name": "perl",
            "description": "Perl 5 is a highly capable, feature-rich programming language with over\n27 years of development."
        },
        {
            "name": "perl-xml-filter-buffertext",
            "description": "This is a very simple filter. One common cause of grief (and programmer\nerror) is that XML parsers aren't required to provide character events\nin one chunk. They can, but are not forced to, and most don't. This\nfilter does the trivial but oft-repeated task of putting all characters\ninto a single event."
        },
        {
            "name": "perl-xml-namespacesupport",
            "description": "This module offers a simple to process namespaced XML names (unames)\nfrom within any application that may need them. It also helps maintain a\nprefix to namespace URI map, and provides a number of basic checks."
        },
        {
            "name": "perl-xml-sax-base",
            "description": "This module has a very simple task - to be a base class for PerlSAX\ndrivers and filters. It's default behaviour is to pass the input\ndirectly to the output unchanged. It can be useful to use this module as\na base class so you don't have to, for example, implement the\ncharacters() callback."
        }
    ],
    "dependent_to": [
        {
            "name": "perl-bioperl",
            "description": "BioPerl is the product of a community effort to produce Perl code which\nis useful in biology. Examples include Sequence objects, Alignment\nobjects and database searching objects. These objects not only do what\nthey are advertised to do in the documentation, but they also interact -\nAlignment objects are made from the Sequence objects, Sequence objects\nhave access to Annotation and SeqFeature objects and databases, Blast\nobjects can be converted to Alignment objects, and so on. This means\nthat the objects provide a coordinated and extensible framework to do\ncomputational biology. BioPerl development focuses on Perl classes, or\ncode that is used to create objects representing biological entities.\nThere are scripts provided in the scripts/ and examples/ directories but\nscripts are not the main focus of the BioPerl developers. Of course, as\nthe objects do most of the hard work for you, all you have to do is\ncombine a number of objects together sensibly to make useful scripts.\nThe intent of the BioPerl development effort is to make reusable tools\nthat aid people in creating their own sites or job-specific\napplications. The BioPerl website at https://bioperl.org/ also attempts\nto maintain links and archives of standalone bio-related Perl tools that\nare not affiliated or related to the core BioPerl effort. Check the site\nfor useful code ideas and contribute your own if possible."
        }
    ]
}