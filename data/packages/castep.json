{
    "name": "castep",
    "aliases": [],
    "versions": [
        {
            "name": "21.11",
            "sha256": "d909936a51dd3dff7a0847c2597175b05c8d0018d5afe416737499408914728f"
        },
        {
            "name": "19.1.1.rc2",
            "sha256": "1fce21dc604774e11b5194d5f30df8a0510afddc16daf3f8b9bbb3f62748f86a"
        }
    ],
    "latest_version": "21.11",
    "build_system": "MakefilePackage",
    "conflicts": [
        {
            "name": "arch=windows-None-None",
            "spec": "build_system=makefile",
            "description": null
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "makefile",
            "description": "Build systems supported by the package"
        },
        {
            "name": "mpi",
            "default": true,
            "description": "Enable MPI build"
        }
    ],
    "homepage": "http://castep.org",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": " CASTEP is a leading code for calculating the properties of materials\nfrom first principles. Using density functional theory, it can simulate\na wide range of properties of materials proprieties including\nenergetics, structure at the atomic level, vibrational properties,\nelectronic response properties etc.\n",
    "dependencies": [
        {
            "name": "blas",
            "description": "XBLAS is a reference implementation for extra precision BLAS. XBLAS is a\nreference implementation for the dense and banded BLAS routines, along\nwith extended and mixed precision version. Extended precision is only\nused internally; input and output arguments remain the same as in the\nexisting BLAS. Extra precisions is implemented as double-double (i.e.,\n128-bit total, 106-bit significand). Mixed precision permits some\ninput/output arguments of different types (mixing real and complex) or\nprecisions (mixing single and double). This implementation is proof of\nconcept, and no attempt was made to optimize performance; performance\nshould be as good as straightforward but careful code written by hand."
        },
        {
            "name": "fftw-api",
            "description": "FFTW (AMD Optimized version) is a comprehensive collection of fast C\nroutines for computing the Discrete Fourier Transform (DFT) and various\nspecial cases thereof. It is an open-source implementation of the Fast\nFourier transform algorithm. It can compute transforms of real and\ncomplex-values arrays of arbitrary size and dimension. AMD Optimized\nFFTW is the optimized FFTW implementation targeted for AMD CPUs. For\nsingle precision build, please use precision value as float. Example :\nspack install amdfftw precision=float LICENSING INFORMATION: By\ndownloading, installing and using this software, you agree to the terms\nand conditions of the AMD AOCL-FFTW license agreement. You may obtain a\ncopy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/fftw/eula/fftw-\nlibraries-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/fftw/eula/fftw-libraries-eula.html"
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "lapack",
            "description": "libFLAME (AMD Optimized version) is a portable library for dense matrix\ncomputations, providing much of the functionality present in Linear\nAlgebra Package (LAPACK). It includes a compatibility layer, FLAPACK,\nwhich includes complete LAPACK implementation. The library provides\nscientific and numerical computing communities with a modern, high-\nperformance dense linear algebra library that is extensible, easy to\nuse, and available under an open source license. libFLAME is a C-only\nimplementation and does not depend on any external FORTRAN libraries\nincluding LAPACK. There is an optional backward compatibility layer,\nlapack2flame that maps LAPACK routine invocations to their corresponding\nnative C implementations in libFLAME. This allows legacy applications to\nstart taking advantage of libFLAME with virtually no changes to their\nsource code. In combination with BLIS library which includes\noptimizations for the AMD EPYC processor family, libFLAME enables\nrunning high performing LAPACK functionalities on AMD platform.\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL-libFLAME\nlicense agreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/dense/eula-\nlibflame/libflame-4-2-eula.html\nhttps://www.amd.com/en/developer/aocl/dense/eula-libflame/libflame-\neula.html"
        },
        {
            "name": "mpi",
            "description": "MPItrampoline: A forwarding MPI implementation that can use any other\nMPI implementation via an MPI ABI."
        },
        {
            "name": "rsync",
            "description": "An open source utility that provides fast incremental file transfer."
        }
    ],
    "dependent_to": []
}