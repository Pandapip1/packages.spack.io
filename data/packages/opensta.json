{
    "aliases": [],
    "build_system": "CMakePackage",
    "conflicts": [],
    "dependencies": [
        {
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software.",
            "name": "cmake"
        },
        {
            "description": "The CUDD package is a package written in C for the manipulation of\ndecision diagrams. It supports binary decision diagrams (BDDs),\nalgebraic decision diagrams (ADDs), and Zero-Suppressed BDDs (ZDDs).",
            "name": "cudd"
        },
        {
            "description": "Flex is a tool for generating scanners.",
            "name": "flex"
        },
        {
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files.",
            "name": "gmake"
        },
        {
            "description": "The LLVM Project is a collection of modular and reusable compiler and\ntoolchain technologies. Despite its name, LLVM has little to do with\ntraditional virtual machines, though it does provide helpful libraries\nthat can be used to build them. The name \"LLVM\" itself is not an\nacronym; it is the full name of the project.",
            "name": "llvm"
        },
        {
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible.",
            "name": "ninja"
        },
        {
            "description": "SWIG is an interface compiler that connects programs written in C and\nC++ with scripting languages such as Perl, Python, Ruby, and Tcl. It\nworks by taking the declarations found in C/C++ header files and using\nthem to generate the wrapper code that scripting languages need to\naccess the underlying C/C++ code. In addition, SWIG provides a variety\nof customization features that let you tailor the wrapping process to\nsuit your application.",
            "name": "swig"
        },
        {
            "description": "Tcl (Tool Command Language) is a very powerful but easy to learn dynamic\nprogramming language, suitable for a very wide range of uses, including\nweb and desktop applications, networking, administration, testing and\nmany more. Open source and business-friendly, Tcl is a mature yet\nevolving language that is truly cross platform, easily deployed and\nhighly extensible.",
            "name": "tcl"
        },
        {
            "description": "A free, general-purpose, legally unencumbered lossless data-compression\nlibrary.",
            "name": "zlib"
        }
    ],
    "dependent_to": [],
    "description": " OpenSTA is a gate level static timing verifier. As a stand-alone\nexecutable it can be used to verify the timing of a design using\nstandard file formats. * Verilog netlist * Liberty library * SDC timing\nconstraints * SDF delay annotation * SPEF parasitics\n",
    "homepage": "https://github.com/parallaxsw/OpenSTA",
    "latest_version": "master",
    "maintainers": [
        "davekeeshan"
    ],
    "name": "opensta",
    "patches": [],
    "resources": [],
    "variants": [
        {
            "default": "cmake",
            "description": "Build systems supported by the package",
            "name": "build_system"
        },
        {
            "default": "Release",
            "description": "CMake build type",
            "name": "build_type"
        },
        {
            "default": true,
            "description": "build with cudd support",
            "name": "cudd"
        },
        {
            "default": "make",
            "description": "the build system generator to use",
            "name": "generator"
        },
        {
            "default": false,
            "description": "CMake interprocedural optimization",
            "name": "ipo"
        },
        {
            "default": true,
            "description": "build with zlib support",
            "name": "zlib"
        }
    ],
    "versions": [
        {
            "branch": "master",
            "name": "master"
        }
    ]
}