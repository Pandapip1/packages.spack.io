{
    "name": "elsi",
    "aliases": [],
    "versions": [
        {
            "name": "2.2.1",
            "sha256": "5b4b2e8fa4b3b68131fe02cc1803a884039b89a1b1138af474af66453bec0b4d"
        }
    ],
    "latest_version": "2.2.1",
    "build_system": "CMakePackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "cmake",
            "description": "Build systems supported by the package"
        },
        {
            "name": "build_type",
            "default": "Release",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "generator",
            "default": "make",
            "description": "the build system generator to use"
        },
        {
            "name": "add_underscore",
            "default": true,
            "description": "Suffix C functions with an underscore"
        },
        {
            "name": "elpa2_kernel",
            "default": "none",
            "description": "ELPA2 Kernel"
        },
        {
            "name": "enable_pexsi",
            "default": false,
            "description": "Enable PEXSI support"
        },
        {
            "name": "enable_sips",
            "default": false,
            "description": "Enable SLEPc-SIPs support"
        },
        {
            "name": "use_external_elpa",
            "default": false,
            "description": "Build ELPA using SPACK"
        },
        {
            "name": "use_external_ntpoly",
            "default": false,
            "description": "Build NTPoly using SPACK"
        },
        {
            "name": "use_external_omm",
            "default": false,
            "description": "Use external libOMM and MatrixSwitch"
        },
        {
            "name": "use_external_superlu",
            "default": false,
            "description": "Use external SuperLU DIST"
        },
        {
            "name": "use_mpi_iallgather",
            "default": true,
            "description": "Use non-blocking collective MPI functions"
        }
    ],
    "homepage": "https://wordpress.elsi-interchange.org/",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "ELSI provides a unified interface for electronic structure codes to a\nvariety of eigenvalue solvers.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        },
        {
            "name": "blas",
            "description": "XBLAS is a reference implementation for extra precision BLAS. XBLAS is a\nreference implementation for the dense and banded BLAS routines, along\nwith extended and mixed precision version. Extended precision is only\nused internally; input and output arguments remain the same as in the\nexisting BLAS. Extra precisions is implemented as double-double (i.e.,\n128-bit total, 106-bit significand). Mixed precision permits some\ninput/output arguments of different types (mixing real and complex) or\nprecisions (mixing single and double). This implementation is proof of\nconcept, and no attempt was made to optimize performance; performance\nshould be as good as straightforward but careful code written by hand."
        },
        {
            "name": "lapack",
            "description": "Arm Performance Libraries provides optimized standard core math\nlibraries for high-performance computing applications on Arm processors."
        },
        {
            "name": "mpi",
            "description": "MVAPICH2-X is the advanced version of the MVAPICH2 MPI library with\nenhanced features (UMR, ODP, DC, Core-Direct, SHARP, XPMEM), OSU INAM\n(InifniBand Network Monitoring and Analysis),PGAS (OpenSHMEM, UPC,\nUPC++, and CAF), and MPI+PGAS programming models with unified\ncommunication runtime. MVAPICH2-X is not installable from source and is\nonly available through a binary mirror. If you do not find the binary\nyou're looking for, send us an email at mvapich@cse.ohio-state.edu. The\nbinary mirror url is: http://mvapich.cse.ohio-\nstate.edu/download/mvapich/spack-mirror/mvapich2x/"
        },
        {
            "name": "scalapack",
            "description": "Intel oneAPI Math Kernel Library (Intel oneMKL; formerly Intel Math\nKernel Library or Intel MKL), is a library of optimized math routines\nfor science, engineering, and financial applications. Core math\nfunctions include BLAS, LAPACK, ScaLAPACK, sparse solvers, fast Fourier\ntransforms, and vector math. LICENSE INFORMATION: By downloading and\nusing this software, you agree to the terms and conditions of the\nsoftware license agreements at https://intel.ly/393CijO."
        },
        {
            "name": "elpa",
            "description": "Eigenvalue solvers for Petaflop-Applications (ELPA)"
        },
        {
            "name": "ntpoly",
            "description": "NTPoly - parallel library for computing matrix functions. NTPoly is a\nlibrary for computing the functions of sparse, hermitian matrices based\non polynomial expansions. For sufficiently sparse matrices, most of the\nmatrix functions in NTPoly can be computed in linear time."
        },
        {
            "name": "slepc",
            "description": "Scalable Library for Eigenvalue Problem Computations."
        },
        {
            "name": "petsc",
            "description": "PETSc is a suite of data structures and routines for the scalable\n(parallel) solution of scientific applications modeled by partial\ndifferential equations."
        },
        {
            "name": "superlu-dist",
            "description": "A general purpose library for the direct solution of large, sparse,\nnonsymmetric systems of linear equations on high performance machines."
        }
    ],
    "dependent_to": [
        {
            "name": "dftbplus",
            "description": "DFTB+ is an implementation of the Density Functional based Tight Binding\n(DFTB) method, containing many extensions to the original method."
        }
    ]
}