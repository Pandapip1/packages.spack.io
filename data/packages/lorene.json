{
    "name": "lorene",
    "aliases": [],
    "versions": [
        {
            "name": "2021.4.22",
            "date": "2021-04-22"
        }
    ],
    "latest_version": "2021.4.22",
    "build_system": "MakefilePackage",
    "conflicts": [
        {
            "name": "platform=windows",
            "spec": "build_system=makefile",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "makefile",
            "description": "Build systems supported by the package"
        },
        {
            "name": "fftw",
            "default": true,
            "description": "Use external FFTW for spectral transformations"
        },
        {
            "name": "bin_star",
            "default": true,
            "description": "Build Bin_star solver for binary neutron star systems"
        }
    ],
    "homepage": "https://lorene.obspm.fr/index.html",
    "maintainers": [
        "eschnett"
    ],
    "patches": [],
    "resources": [],
    "description": "LORENE: Langage Objet pour la RElativite NumeriquE. LORENE is a set of\nC++ classes to solve various problems arising in numerical relativity,\nand more generally in computational astrophysics. It provides tools to\nsolve partial differential equations by means of multi-domain spectral\nmethods.\n",
    "dependencies": [
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "blas",
            "description": "CLBlast is a modern, lightweight, performant and tunable OpenCL BLAS\nlibrary written in C++11. It is designed to leverage the full\nperformance potential of a wide variety of OpenCL devices from different\nvendors, including desktop and laptop GPUs, embedded GPUs, and other\naccelerators. CLBlast implements BLAS routines: basic linear algebra\nsubprograms operating on vectors and matrices."
        },
        {
            "name": "fftw",
            "description": "FFTW is a C subroutine library for computing the discrete Fourier\ntransform (DFT) in one or more dimensions, of arbitrary input size, and\nof both real and complex data (as well as of even/odd data, i.e. the\ndiscrete cosine/sine transforms or DCT/DST). We believe that FFTW, which\nis free software, should become the FFT library of choice for most\napplications."
        },
        {
            "name": "gsl",
            "description": "The GNU Scientific Library (GSL) is a numerical library for C and C++\nprogrammers. It is free software under the GNU General Public License.\nThe library provides a wide range of mathematical routines such as\nrandom number generators, special functions and least-squares fitting.\nThere are over 1000 functions in total with an extensive test suite."
        },
        {
            "name": "lapack",
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications."
        },
        {
            "name": "pgplot",
            "description": "PGPLOT Graphics Subroutine Library. The PGPLOT Graphics Subroutine\nLibrary is a Fortran- or C-callable, device-independent graphics package\nfor making simple scientific graphs. It is intended for making graphical\nimages of publication quality with minimum effort on the part of the\nuser. For most applications, the program can be device-independent, and\nthe output can be directed to the appropriate device at run time."
        }
    ],
    "dependent_to": []
}