{
    "name": "mimalloc",
    "aliases": [],
    "versions": [
        {
            "name": "dev-slice",
            "branch": "dev-slice"
        },
        {
            "name": "dev",
            "branch": "dev"
        },
        {
            "name": "master",
            "branch": "master"
        },
        {
            "name": "2.0.6",
            "sha256": "9f05c94cc2b017ed13698834ac2a3567b6339a8bde27640df5a1581d49d05ce5"
        },
        {
            "name": "1.7.6",
            "sha256": "d74f86ada2329016068bc5a243268f1f555edd620b6a7d6ce89295e7d6cf18da"
        }
    ],
    "latest_version": "2.0.6",
    "build_system": "CMakePackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "cmake",
            "description": "Build systems supported by the package"
        },
        {
            "name": "build_type",
            "default": "Release",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "generator",
            "default": "make",
            "description": "the build system generator to use"
        },
        {
            "name": "libs",
            "default": "shared,static,object",
            "description": "Build shared, static, or object libraries"
        },
        {
            "name": "secure",
            "default": false,
            "description": "Use full security mitigations (like guard pages, allocation randomization, double-free mitigation, and free-list corruption detection)"
        },
        {
            "name": "debug_full",
            "default": false,
            "description": "Use full internal heap invariant checking in DEBUG mode (expensive)"
        },
        {
            "name": "padding",
            "default": true,
            "description": "Enable padding to detect heap block overflow (used only in DEBUG mode)"
        },
        {
            "name": "override",
            "default": true,
            "description": "Override the standard malloc interface (e.g. define entry points for malloc() etc)"
        },
        {
            "name": "xmalloc",
            "default": false,
            "description": "Enable abort() call on memory allocation failure by default"
        },
        {
            "name": "show_errors",
            "default": false,
            "description": "Show error and warning messages by default (only enabled by default in DEBUG mode)"
        },
        {
            "name": "use_cxx",
            "default": false,
            "description": "Use the C++ compiler to compile the library (instead of the C compiler)"
        },
        {
            "name": "see_asm",
            "default": false,
            "description": "Generate assembly files"
        },
        {
            "name": "osx_interpose",
            "default": true,
            "description": "Use interpose to override standard malloc on macOS"
        },
        {
            "name": "osx_zone",
            "default": true,
            "description": "Use malloc zone to override standard malloc on macOS"
        },
        {
            "name": "local_dynamic_tls",
            "default": false,
            "description": "Use slightly slower, dlopen-compatible TLS mechanism (Unix)"
        },
        {
            "name": "build_tests",
            "default": false,
            "description": "Build test executables"
        },
        {
            "name": "debug_tsan",
            "default": false,
            "description": "Build with thread sanitizer (needs clang)"
        },
        {
            "name": "debug_ubsan",
            "default": false,
            "description": "Build with undefined-behavior sanitizer (needs clang++)"
        },
        {
            "name": "skip_collect_on_exit",
            "default": false,
            "description": "Skip collecting memory on program exit"
        }
    ],
    "homepage": "https://microsoft.github.io/mimalloc",
    "maintainers": [
        "msimberg"
    ],
    "patches": [],
    "resources": [],
    "description": "mimalloc is a compact general purpose allocator with excellent\nperformance.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        }
    ],
    "dependent_to": [
        {
            "name": "pika",
            "description": "C++ runtime system for parallellism and concurrency."
        },
        {
            "name": "mold",
            "description": "mold: A Modern Linker"
        },
        {
            "name": "hpx",
            "description": "C++ runtime system for parallel and distributed applications."
        }
    ]
}