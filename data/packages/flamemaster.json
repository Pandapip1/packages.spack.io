{
    "name": "flamemaster",
    "aliases": [],
    "versions": [
        {
            "name": "4.3.1",
            "sha256": "8ff382f098e44a7978fe1bcc688272d65f0b374487af4523d94cca983dc57378"
        }
    ],
    "latest_version": "4.3.1",
    "build_system": "CMakePackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "cmake",
            "description": "Build systems supported by the package"
        },
        {
            "name": "build_type",
            "default": "Release",
            "description": "The build type to build"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "generator",
            "default": "make",
            "description": "the build system generator to use"
        },
        {
            "name": "bilin_omega",
            "default": true,
            "description": "Compile with bilinear interpolationfor collision integrals (omega)"
        },
        {
            "name": "combustion",
            "default": false,
            "description": "Integrate comustion librariesfor kinetics, thermodynamics, and transport"
        },
        {
            "name": "fortran_code",
            "default": false,
            "description": "Compile optional fortran code like dassl, the adiabaticflame temperature module, and a mechanism converter tool"
        },
        {
            "name": "scanmannew",
            "default": false,
            "description": "Compile the new ScanMan"
        },
        {
            "name": "dco_chunk_tape",
            "default": false,
            "description": "Dynamically allocate memory for the dco tape"
        },
        {
            "name": "troe",
            "default": false,
            "description": "FlameMaster mechanism format allows for specifyingan additional parameter. This option disables the use of theparamter which is currently required to run adjoint sensitivity analysis."
        },
        {
            "name": "jl_debug",
            "default": false,
            "description": "Debug mode during development(Johannes Lotz)"
        },
        {
            "name": "flux_bc",
            "default": false,
            "description": "Specify boundary conditions as velocity [m/s]or massflux in Counterflow (Physical Coord.)"
        },
        {
            "name": "full_diffusion",
            "default": false,
            "description": "Compile with multi-component diffusion"
        },
        {
            "name": "intel_prof",
            "default": false,
            "description": "Enable -prof-gen and -prof-use"
        },
        {
            "name": "soot_lib",
            "default": false,
            "description": "Soot library with moment equation solving"
        },
        {
            "name": "newton_perf",
            "default": false,
            "description": "Compile with time measurement of each Newton step"
        },
        {
            "name": "optima",
            "default": false,
            "description": "Include code for Optima++ features"
        },
        {
            "name": "opt_reaction_rates",
            "default": true,
            "description": "Fast computation of reaction rates."
        },
        {
            "name": "prem_upwind_convec",
            "default": true,
            "description": "Use upwind scheme for the convective term."
        },
        {
            "name": "sundials_hint",
            "default": false,
            "description": "No hints on how FlameMaster can install sundials."
        },
        {
            "name": "simd_kinetics",
            "default": false,
            "description": "WITH SIMD_KINETICS"
        },
        {
            "name": "solve_mom_log",
            "default": false,
            "description": "Solve the soot Moments equation with logarithms"
        },
        {
            "name": "solve_with_z",
            "default": true,
            "description": "Counter flow diffusion flame implementation includesa solution of the mixture fraction equation"
        },
        {
            "name": "sundials_lapack",
            "default": false,
            "description": "Link LAPACK in sundials"
        },
        {
            "name": "sundials_no_idas_search",
            "default": false,
            "description": "Do not search for IDAS (part of sundials)."
        },
        {
            "name": "sundials_use_static_lib",
            "default": true,
            "description": "Use static linking for sundials libraries"
        },
        {
            "name": "sundials_diagnos",
            "default": false,
            "description": "Only for troubleshooting"
        },
        {
            "name": "tests",
            "default": false,
            "description": "Install google-test framework for unit testsand enable units tests."
        },
        {
            "name": "third_party_in_build_dir",
            "default": true,
            "description": "Compile third party libraries and tools in build diretory"
        },
        {
            "name": "local_lewis",
            "default": false,
            "description": "Write Lewis numbers at every grid point"
        },
        {
            "name": "flamemaster_prefix",
            "default": true,
            "description": "Used to modify the installation directories"
        },
        {
            "name": "openmp",
            "default": true,
            "description": "Build with OpenMP"
        },
        {
            "name": "eigen",
            "default": false,
            "description": "Build with Eigen Integration"
        },
        {
            "name": "eglib",
            "default": false,
            "description": "Build with EG lib"
        },
        {
            "name": "sundials",
            "default": true,
            "description": "with sundials"
        }
    ],
    "homepage": "https://www.itv.rwth-aachen.de/downloads/flamemaster/",
    "maintainers": [
        "amd-toolchain-support"
    ],
    "patches": [],
    "resources": [],
    "description": " FlameMaster is an open source C++ program package for 0D combustion and\n1D laminar flame calculations. FlameMaster is written by Heinz Pitsch.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        },
        {
            "name": "blas",
            "description": "Automatically Tuned Linear Algebra Software, generic shared ATLAS is an\napproach for the automatic generation and optimization of numerical\nsoftware. Currently ATLAS supplies optimized versions for the complete\nset of linear algebra kernels known as the Basic Linear Algebra\nSubroutines (BLAS), and a subset of the linear algebra routines in the\nLAPACK library."
        },
        {
            "name": "lapack",
            "description": "libFLAME (AMD Optimized version) is a portable library for dense matrix\ncomputations, providing much of the functionality present in Linear\nAlgebra Package (LAPACK). It includes a compatibility layer, FLAPACK,\nwhich includes complete LAPACK implementation. The library provides\nscientific and numerical computing communities with a modern, high-\nperformance dense linear algebra library that is extensible, easy to\nuse, and available under an open source license. libFLAME is a C-only\nimplementation and does not depend on any external FORTRAN libraries\nincluding LAPACK. There is an optional backward compatibility layer,\nlapack2flame that maps LAPACK routine invocations to their corresponding\nnative C implementations in libFLAME. This allows legacy applications to\nstart taking advantage of libFLAME with virtually no changes to their\nsource code. In combination with BLIS library which includes\noptimizations for the AMD EPYC processor family, libFLAME enables\nrunning high performing LAPACK functionalities on AMD platform.\nLICENSING INFORMATION: By downloading, installing and using this\nsoftware, you agree to the terms and conditions of the AMD AOCL-libFLAME\nlicense agreement. You may obtain a copy of this license agreement from\nhttps://www.amd.com/en/developer/aocl/dense/eula-\nlibflame/libflame-4-1-eula.html\nhttps://www.amd.com/en/developer/aocl/dense/eula-libflame/libflame-\neula.html"
        },
        {
            "name": "bison",
            "description": "Bison is a general-purpose parser generator that converts an annotated\ncontext-free grammar into a deterministic LR or generalized LR (GLR)\nparser employing LALR(1) parser tables."
        },
        {
            "name": "flex",
            "description": "Flex is a tool for generating scanners."
        }
    ],
    "dependent_to": []
}