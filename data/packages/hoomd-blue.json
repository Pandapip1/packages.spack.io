{
    "name": "hoomd-blue",
    "aliases": [],
    "versions": [
        {
            "name": "develop",
            "submodules": true
        },
        {
            "name": "2.2.2",
            "tag": "v2.2.2",
            "submodules": true
        },
        {
            "name": "2.1.6",
            "tag": "v2.1.6",
            "submodules": true
        }
    ],
    "latest_version": "2.2.2",
    "build_system": "CMakePackage",
    "conflicts": [
        {
            "name": "%gcc@:4.6",
            "spec": "",
            "description": "None"
        },
        {
            "name": "%gcc@6.0:",
            "spec": "@2.1.6",
            "description": "None"
        },
        {
            "name": "%gcc@7.0:",
            "spec": "",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "cmake",
            "description": "Build systems supported by the package"
        },
        {
            "name": "build_type",
            "default": "RelWithDebInfo",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "mpi",
            "default": true,
            "description": "Compile with MPI enabled"
        },
        {
            "name": "cuda",
            "default": true,
            "description": "Compile with CUDA Toolkit"
        },
        {
            "name": "doc",
            "default": false,
            "description": "Generate documentation"
        }
    ],
    "homepage": "https://glotzerlab.engin.umich.edu/hoomd-blue/",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "HOOMD-blue is a general-purpose particle simulation toolkit. It scales\nfrom a single CPU core to thousands of GPUs. You define particle initial\nconditions and interactions in a high-level python script. Then tell\nHOOMD-blue how you want to execute the job and it takes care of the\nrest. Python job scripts give you unlimited flexibility to create custom\ninitialization routines, control simulation parameters, and perform in\nsitu analysis.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "pkgconfig",
            "description": "pkgconf is a program which helps to configure compiler and linker flags\nfor development frameworks. It is similar to pkg-config from\nfreedesktop.org, providing additional functionality while also\nmaintaining compatibility."
        },
        {
            "name": "mpi",
            "description": "Mvapich2 is a High-Performance MPI Library for clusters with diverse\nnetworks (InfiniBand, Omni-Path, Ethernet/iWARP, and RoCE) and computing\nplatforms (x86 (Intel and AMD), ARM and OpenPOWER)"
        },
        {
            "name": "cuda",
            "description": "CUDA is a parallel computing platform and programming model invented by\nNVIDIA. It enables dramatic increases in computing performance by\nharnessing the power of the graphics processing unit (GPU). Note: This\npackage does not currently install the drivers necessary to run CUDA.\nThese will need to be installed manually. See:\nhttps://docs.nvidia.com/cuda/ for details."
        },
        {
            "name": "doxygen",
            "description": "Doxygen is the de facto standard tool for generating documentation from\nannotated C++ sources, but it also supports other popular programming\nlanguages such as C, Objective-C, C#, PHP, Java, Python, IDL (Corba,\nMicrosoft, and UNO/OpenOffice flavors), Fortran, VHDL, Tcl, and to some\nextent D.."
        }
    ],
    "dependent_to": []
}