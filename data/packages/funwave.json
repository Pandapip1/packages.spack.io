{
    "name": "funwave",
    "aliases": [],
    "versions": [
        {
            "name": "3.2",
            "commit": "6e57952d1cef1bb6c0930f07387ed41694bd604b",
            "tag": "v3.2"
        },
        {
            "name": "3.1",
            "commit": "d99502f9288380e0c823f7cc619c6c7c1897f2b9",
            "tag": "v3.1"
        },
        {
            "name": "3.0",
            "commit": "b569dfe08ab379d7ec375c71304ff95bd6f5ddb6",
            "tag": "v3.0"
        }
    ],
    "latest_version": "3.2",
    "build_system": "MakefilePackage",
    "conflicts": [
        {
            "name": "platform=windows",
            "spec": "build_system=makefile",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "makefile",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://fengyanshi.github.io/build/html/index.html",
    "maintainers": [
        "fengyanshi",
        "stevenrbrandt"
    ],
    "patches": [],
    "resources": [],
    "description": " What is FUNWAVE-TVD? FUNWAVE-TVD is the Total Variation Diminishing\n(TVD) version of the fully nonlinear Boussinesq wave model (FUNWAVE)\ndeveloped by Shi et al. (2012). The FUNWAVE model was initially\ndeveloped by Kirby et al. (1998) based on Wei et al. (1995). The\ndevelopment of the present version was motivated by recent needs for\nmodeling of surfzone--cale optical properties in a Boussinesq model\nframework, and modeling of Tsunami waves in both a global/coastal scale\nfor prediction of coastal inundation and a basin scale for wave\npropagation.\n",
    "dependencies": [
        {
            "name": "mpi",
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications."
        }
    ],
    "dependent_to": []
}