{
    "name": "dftbplus",
    "aliases": [],
    "versions": [
        {
            "name": "19.1",
            "sha256": "4d07f5c6102f06999d8cfdb1d17f5b59f9f2b804697f14b3bc562e3ea094b8a8"
        }
    ],
    "latest_version": "19.1",
    "build_system": "MakefilePackage",
    "conflicts": [
        {
            "name": "platform=windows",
            "spec": "build_system=makefile",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "makefile",
            "description": "Build systems supported by the package"
        },
        {
            "name": "mpi",
            "default": true,
            "description": "Build an MPI-paralelised version of the code."
        },
        {
            "name": "gpu",
            "default": false,
            "description": "Use the MAGMA library for GPU accelerated computation"
        },
        {
            "name": "elsi",
            "default": false,
            "description": "Use the ELSI library for large scale systems. Only has any effect if you build with '+mpi'"
        },
        {
            "name": "sockets",
            "default": false,
            "description": "Whether the socket library (external control) should be linked"
        },
        {
            "name": "arpack",
            "default": false,
            "description": "Use ARPACK for excited state DFTB functionality"
        },
        {
            "name": "transport",
            "default": false,
            "description": "Whether transport via libNEGF should be included. Only affects parallel build. (serial version is built without libNEGF/transport)"
        },
        {
            "name": "dftd3",
            "default": false,
            "description": "Use DftD3 dispersion library (if you need this dispersion model)"
        }
    ],
    "homepage": "https://www.dftbplus.org",
    "maintainers": [],
    "patches": [],
    "resources": [
        {
            "version": "@18.2:",
            "name": "slakos",
            "destination": "external/slakos",
            "placement": null
        }
    ],
    "description": "DFTB+ is an implementation of the Density Functional based Tight Binding\n(DFTB) method, containing many extensions to the original method.\n",
    "dependencies": [
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "lapack",
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications."
        },
        {
            "name": "blas",
            "description": "XBLAS is a reference implementation for extra precision BLAS. XBLAS is a\nreference implementation for the dense and banded BLAS routines, along\nwith extended and mixed precision version. Extended precision is only\nused internally; input and output arguments remain the same as in the\nexisting BLAS. Extra precisions is implemented as double-double (i.e.,\n128-bit total, 106-bit significand). Mixed precision permits some\ninput/output arguments of different types (mixing real and complex) or\nprecisions (mixing single and double). This implementation is proof of\nconcept, and no attempt was made to optimize performance; performance\nshould be as good as straightforward but careful code written by hand."
        },
        {
            "name": "scalapack",
            "description": "ScaLAPACK is a library of high-performance linear algebra routines for\nparallel distributed memory machines"
        },
        {
            "name": "mpi",
            "description": "Cray/HPE packaging of MVAPICH2 for HPE Apollo systems"
        },
        {
            "name": "elsi",
            "description": "ELSI provides a unified interface for electronic structure codes to a\nvariety of eigenvalue solvers."
        },
        {
            "name": "magma",
            "description": "The MAGMA project aims to develop a dense linear algebra library similar\nto LAPACK but for heterogeneous/hybrid architectures, starting with\ncurrent \"Multicore+GPU\" systems."
        },
        {
            "name": "arpack-ng",
            "description": "ARPACK-NG is a collection of Fortran77 subroutines designed to solve\nlarge scale eigenvalue problems. Important Features: * Reverse\nCommunication Interface. * Single and Double Precision Real Arithmetic\nVersions for Symmetric, Non-symmetric, Standard or Generalized Problems.\n* Single and Double Precision Complex Arithmetic Versions for Standard\nor Generalized Problems. * Routines for Banded Matrices - Standard or\nGeneralized Problems. * Routines for The Singular Value Decomposition. *\nExample driver routines that may be used as templates to implement\nnumerous Shift-Invert strategies for all problem types, data types and\nprecision. This project is a joint project between Debian, Octave and\nScilab in order to provide a common and maintained version of arpack.\nIndeed, no single release has been published by Rice university for the\nlast few years and since many software (Octave, Scilab, R, Matlab...)\nforked it and implemented their own modifications, arpack-ng aims to\ntackle this by providing a common repository and maintained versions.\narpack-ng is replacing arpack almost everywhere."
        },
        {
            "name": "dftd3-lib",
            "description": "A dispersion correction for density functionals, Hartree-Fock and semi-\nempirical quantum chemical methods"
        }
    ],
    "dependent_to": []
}