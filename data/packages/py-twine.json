{
    "name": "py-twine",
    "aliases": [],
    "versions": [
        {
            "name": "4.0.2",
            "sha256": "9e102ef5fdd5a20661eb88fad46338806c3bd32cf1db729603fe3697b1bc83c8"
        },
        {
            "name": "4.0.1",
            "sha256": "96b1cf12f7ae611a4a40b6ae8e9570215daff0611828f5fe1f37a16255ab24a0"
        },
        {
            "name": "2.0.0",
            "sha256": "9fe7091715c7576df166df8ef6654e61bada39571783f2fd415bdcba867c6993"
        }
    ],
    "latest_version": "4.0.2",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://twine.readthedocs.io/",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "Twine is a utility for publishing Python packages on PyPI.\n",
    "dependencies": [
        {
            "name": "py-importlib-metadata",
            "description": "Read metadata from Python packages."
        },
        {
            "name": "py-keyring",
            "description": "The Python keyring library provides an easy way to access the system\nkeyring service from python. It can be used in any application that\nneeds safe password storage."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-pkginfo",
            "description": "Query metadatdata from sdists / bdists / installed packages."
        },
        {
            "name": "py-readme-renderer",
            "description": "readme_renderer is a library for rendering \"readme\" descriptions for\nWarehouse."
        },
        {
            "name": "py-requests",
            "description": "Python HTTP for Humans."
        },
        {
            "name": "py-requests-toolbelt",
            "description": "A toolbelt of useful classes and functions to be used with python-\nrequests"
        },
        {
            "name": "py-rfc3986",
            "description": "A Python implementation of RFC 3986 including validation and authority\nparsing."
        },
        {
            "name": "py-rich",
            "description": "Rich is a Python library for rich text and beautiful formatting in the\nterminal."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-setuptools-scm",
            "description": "The blessed package to manage your versions by scm tags."
        },
        {
            "name": "py-tqdm",
            "description": "A Fast, Extensible Progress Meter"
        },
        {
            "name": "py-urllib3",
            "description": "HTTP library with thread-safe connection pooling, file post, and more."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "python-venv",
            "description": "A Spack managed Python virtual environment"
        }
    ],
    "dependent_to": [
        {
            "name": "py-rsatoolbox",
            "description": "Representational Similarity Analysis (RSA) in Python."
        },
        {
            "name": "py-graphviz",
            "description": "Simple Python interface for Graphviz"
        },
        {
            "name": "py-blight",
            "description": "A catch-all compile-tool wrapper."
        },
        {
            "name": "py-python-daemon",
            "description": "Library to implement a well-behaved Unix daemon process. This library\nimplements the well-behaved daemon specification of PEP Standard daemon\nprocess. A well-behaved Unix daemon process is tricky to get right, but\nthe required steps are much the same for every daemon program. A\nDaemonContext instance holds the behaviour and configured process\nenvironment for the program; use the instance as a context manager to\nenter a daemon state."
        },
        {
            "name": "py-glmsingle",
            "description": "A toolbox for accurate single-trial estimates in fMRI time-series data."
        }
    ]
}