{
    "name": "py-flash-attn",
    "aliases": [],
    "versions": [
        {
            "name": "2.5.5",
            "sha256": "751cee17711d006fe7341cdd78584af86a6239afcfe43b9ed11c84db93126267"
        },
        {
            "name": "2.5.4",
            "sha256": "d83bb427b517b07e9db655f6e5166eb2607dccf4d6ca3229e3a3528c206b0175"
        },
        {
            "name": "2.4.2",
            "sha256": "eb822a8c4219b610e9d734cbc8cd9ee4547f27433815a2b90dc1462766feefc1"
        }
    ],
    "latest_version": "2.5.5",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://pypi.org/project/flash-attn/",
    "maintainers": [
        "aurianer"
    ],
    "patches": [],
    "resources": [],
    "description": " This package provides the official implementation of FlashAttention.\n",
    "dependencies": [
        {
            "name": "py-einops",
            "description": "Flexible and powerful tensor operations for readable and reliable code.\nSupports numpy, pytorch, tensorflow, and others."
        },
        {
            "name": "py-ninja",
            "description": "Ninja is a small build system with a focus on speed."
        },
        {
            "name": "py-packaging",
            "description": "Core utilities for Python packages."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-psutil",
            "description": "psutil is a cross-platform library for retrieving information on running\nprocesses and system utilization (CPU, memory, disks, network) in\nPython."
        },
        {
            "name": "py-pybind11",
            "description": "pybind11 -- Seamless operability between C++11 and Python. pybind11 is a\nlightweight header-only library that exposes C++ types in Python and\nvice versa, mainly to create Python bindings of existing C++ code. Its\ngoals and syntax are similar to the excellent Boost.Python library by\nDavid Abrahams: to minimize boilerplate code in traditional extension\nmodules by inferring type information using compile-time introspection."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-torch",
            "description": "Tensors and Dynamic neural networks in Python with strong GPU\nacceleration."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "python-venv",
            "description": "A Spack managed Python virtual environment"
        }
    ],
    "dependent_to": []
}