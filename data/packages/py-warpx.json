{
    "name": "py-warpx",
    "aliases": [],
    "versions": [
        {
            "name": "develop",
            "branch": "development"
        },
        {
            "name": "22.01",
            "sha256": "e465ffadabb7dc360c63c4d3862dc08082b5b0e77923d3fb05570408748b0d28"
        },
        {
            "name": "21.12",
            "sha256": "847c98aac20c73d94c823378803c82be9a14139f1c14ea483757229b452ce4c1"
        },
        {
            "name": "21.11",
            "sha256": "ce60377771c732033a77351cd3500b24b5d14b54a5adc7a622767b9251c10d0b"
        },
        {
            "name": "21.10",
            "sha256": "d372c573f0360094d5982d64eceeb0149d6620eb75e8fdbfdc6777f3328fb454"
        },
        {
            "name": "21.09",
            "sha256": "861a65f11846541c803564db133c8678b9e8779e69902ef1637b21399d257eab"
        },
        {
            "name": "21.08",
            "sha256": "6128a32cfd075bc63d08eebea6d4f62d33ce0570f4fd72330a71023ceacccc86"
        },
        {
            "name": "21.07",
            "sha256": "a8740316d813c365715f7471201499905798b50bd94950d33f1bd91478d49561"
        },
        {
            "name": "21.06",
            "sha256": "a26039dc4061da45e779dd5002467c67a533fc08d30841e01e7abb3a890fbe30"
        },
        {
            "name": "21.05",
            "sha256": "f835f0ae6c5702550d23191aa0bb0722f981abb1460410e3d8952bc3d945a9fc"
        },
        {
            "name": "21.04",
            "sha256": "51d2d8b4542eada96216e8b128c0545c4b7527addc2038efebe586c32c4020a0"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "mpi",
            "default": true,
            "description": "Enable MPI support"
        }
    ],
    "homepage": "https://ecp-warpx.github.io",
    "maintainers": [
        "ax3l",
        "dpgrote",
        "RemiLehe"
    ],
    "patches": [],
    "resources": [],
    "description": "WarpX is an advanced electromagnetic Particle-In-Cell code. It supports\nmany features including Perfectly-Matched Layers (PML) and mesh\nrefinement. In addition, WarpX is a highly-parallel and highly-optimized\ncode and features hybrid OpenMP/MPI parallelization, advanced\nvectorization techniques and load balancing capabilities. These are the\nPython bindings of WarpX with PICMI input support. See the C++ 'warpx'\npackage for the WarpX application and library.\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "warpx",
            "description": "WarpX is an advanced electromagnetic Particle-In-Cell code. It supports\nmany features including Perfectly-Matched Layers (PML) and mesh\nrefinement. In addition, WarpX is a highly-parallel and highly-optimized\ncode and features hybrid OpenMP/MPI parallelization, advanced\nvectorization techniques and load balancing capabilities. For WarpX'\nPython bindings and PICMI input support, see the 'py-warpx' package."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-mpi4py",
            "description": "This package provides Python bindings for the Message Passing Interface\n(MPI) standard. It is implemented on top of the MPI-1/MPI-2\nspecification and exposes an API which grounds on the standard MPI-2 C++\nbindings."
        },
        {
            "name": "py-periodictable",
            "description": "nose extends the test loading and running features of unittest, making\nit easier to write, find and run tests."
        },
        {
            "name": "py-picmistandard",
            "description": "Standard input format for Particle-In-Cell codes"
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        }
    ],
    "dependent_to": []
}