{
    "name": "qca",
    "aliases": [],
    "versions": [
        {
            "name": "2.3.5",
            "sha256": "326346893c5ad41c160b66ff10740ff4d8a1cbcd2fe545693f9791de1e01f00b"
        },
        {
            "name": "2.3.0",
            "sha256": "39aa18f0985d82949f4dccce04af3eb8d4b6b64e0c71785786738d38d8183b0a"
        },
        {
            "name": "2.2.90",
            "sha256": "074ac753b51a6fa15503be9418f7430effe368fd31dc41567942d832e539b17e"
        },
        {
            "name": "2.2.1",
            "sha256": "c67fc0fa8ae6cb3d0ba0fbd8fca8ee8e4c5061b99f1fd685fd7d9800cef17f6b"
        },
        {
            "name": "2.1.3",
            "sha256": "a5135ffb0250a40e9c361eb10cd3fe28293f0cf4e5c69d3761481eafd7968067"
        }
    ],
    "latest_version": "2.3.5",
    "build_system": "CMakePackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "cmake",
            "description": "Build systems supported by the package"
        },
        {
            "name": "build_type",
            "default": "Release",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "generator",
            "default": "make",
            "description": "the build system generator to use"
        }
    ],
    "homepage": "https://userbase.kde.org/QCA",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "Taking a hint from the similarly-named Java Cryptography Architecture,\nQCA aims to provide a straightforward and cross-platform crypto API,\nusing Qt datatypes and conventions. QCA separates the API from the\nimplementation, using plugins known as Providers. The advantage of this\nmodel is to allow applications to avoid linking to or explicitly\ndepending on any particular cryptographic library. This allows one to\neasily change or upgrade crypto implementations without even needing to\nrecompile the application! QCA should work everywhere Qt does, including\nWindows/Unix/MacOSX.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        },
        {
            "name": "qt",
            "description": "Qt is a comprehensive cross-platform C++ application framework."
        }
    ],
    "dependent_to": [
        {
            "name": "qgis",
            "description": "QGIS is a free and open-source cross-platform desktop geographic\ninformation system application that supports viewing, editing, and\nanalysis of geospatial data."
        }
    ]
}