{
    "name": "py-fenics-basix",
    "aliases": [],
    "versions": [
        {
            "name": "main",
            "branch": "main"
        },
        {
            "name": "0.7.0",
            "sha256": "9bee81b396ee452eec8d9735f278cb44cb6994c6bc30aec8ed9bb4b12d83fa7f"
        },
        {
            "name": "0.6.0",
            "sha256": "687ae53153c98facac4080dcdc7081701db1dcea8c5e7ae3feb72aec17f83304"
        },
        {
            "name": "0.5.1",
            "sha256": "69133476ac35f0bd0deccb480676030378c341d7dfb2adaca22cd16b7e1dc1cb"
        },
        {
            "name": "0.4.2",
            "sha256": "a54f5e442b7cbf3dbb6319c682f9161272557bd7f42e2b8b8ccef88bc1b7a22f"
        }
    ],
    "latest_version": "0.7.0",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://github.com/FEniCS/basix",
    "maintainers": [
        "chrisrichardson",
        "garth-wells",
        "jhale",
        "mscroggs"
    ],
    "patches": [],
    "resources": [],
    "description": "Python interface to Basix, a finite element definition and tabulation\nruntime library\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "fenics-basix",
            "description": "Basix is a finite element definition and tabulation runtime library"
        },
        {
            "name": "py-nanobind",
            "description": "nanobind -- Seamless operability between C++11 and Python. nanobind is a\nsmall binding library that exposes C++ types in Python and vice versa.\nIt is reminiscent of Boost.Python and pybind11 and uses near-identical\nsyntax. In contrast to these existing tools, nanobind is more efficient:\nbindings compile in a shorter amount of time, produce smaller binaries,\nand have better runtime performance."
        },
        {
            "name": "py-numpy",
            "description": "Fundamental package for array computing in Python."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-pybind11",
            "description": "pybind11 -- Seamless operability between C++11 and Python. pybind11 is a\nlightweight header-only library that exposes C++ types in Python and\nvice versa, mainly to create Python bindings of existing C++ code. Its\ngoals and syntax are similar to the excellent Boost.Python library by\nDavid Abrahams: to minimize boilerplate code in traditional extension\nmodules by inferring type information using compile-time introspection."
        },
        {
            "name": "py-scikit-build-core",
            "description": "scikit-build-core is a doubly improved build system generator for\nCPython C/C++/Fortran/Cython extensions. It features several\nimprovements over the classic scikit-build build system generator."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "xtensor",
            "description": "Multi-dimensional arrays with broadcasting and lazy computing"
        }
    ],
    "dependent_to": [
        {
            "name": "py-fenics-ffcx",
            "description": "Next generation FEniCS Form Compiler"
        },
        {
            "name": "py-fenics-dolfinx",
            "description": "Python interface to the next generation FEniCS problem solving\nenvironment"
        }
    ]
}