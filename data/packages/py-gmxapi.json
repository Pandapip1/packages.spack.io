{
    "name": "py-gmxapi",
    "aliases": [],
    "versions": [
        {
            "name": "0.4.2",
            "sha256": "c746c6498c73a75913d7fcb01c13cc001d4bcb82999e9bf91d63578565ed1a1f"
        },
        {
            "name": "0.4.1",
            "sha256": "cc7a2e509ab8a59c187d388dcfd21ea78b785c3b355149b1818085f34dbda62a"
        },
        {
            "name": "0.4.0",
            "sha256": "7fd58e6a4b1391043379e8ba55555ebeba255c5b394f5df9d676e6a5571d7eba"
        }
    ],
    "latest_version": "0.4.2",
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "python_pip",
            "description": "Build systems supported by the package"
        }
    ],
    "homepage": "https://manual.gromacs.org/current/gmxapi/index.html",
    "maintainers": [
        "adamjstewart",
        "eirrgang",
        "peterkasson"
    ],
    "patches": [],
    "resources": [],
    "description": "Python bindings and ensemble workflow management for GROMACS. The\nGROMACS C++ API is affected by its package variants. You can specify a\nparticular GROMACS API by making the dependency variant explicit. E.g.\n``spack install gmxapi ^gromacs+mpi~double``\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "gromacs",
            "description": "GROMACS is a molecular dynamics package primarily designed for\nsimulations of proteins, lipids and nucleic acids. It was originally\ndeveloped in the Biophysical Chemistry department of University of\nGroningen, and is now maintained by contributors in universities and\nresearch centers across the world. GROMACS is one of the fastest and\nmost popular software packages available and can run on CPUs as well as\nGPUs. It is free, open source released under the GNU Lesser General\nPublic License. Before the version 4.6, GROMACS was released under the\nGNU General Public License."
        },
        {
            "name": "mpi",
            "description": "IBM MPI implementation from Spectrum MPI."
        },
        {
            "name": "py-cmake",
            "description": "CMake is an open-source, cross-platform family of tools designed to\nbuild, test and package software"
        },
        {
            "name": "py-importlib-metadata",
            "description": "Read metadata from Python packages."
        },
        {
            "name": "py-mpi4py",
            "description": "This package provides Python bindings for the Message Passing Interface\n(MPI) standard. It is implemented on top of the MPI-1/MPI-2\nspecification and exposes an API which grounds on the standard MPI-2 C++\nbindings."
        },
        {
            "name": "py-networkx",
            "description": "NetworkX is a Python package for the creation, manipulation, and study\nof the structure, dynamics, and functions of complex networks."
        },
        {
            "name": "py-numpy",
            "description": "Fundamental package for array computing in Python."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-packaging",
            "description": "Core utilities for Python packages."
        },
        {
            "name": "py-pybind11",
            "description": "pybind11 -- Seamless operability between C++11 and Python. pybind11 is a\nlightweight header-only library that exposes C++ types in Python and\nvice versa, mainly to create Python bindings of existing C++ code. Its\ngoals and syntax are similar to the excellent Boost.Python library by\nDavid Abrahams: to minimize boilerplate code in traditional extension\nmodules by inferring type information using compile-time introspection."
        },
        {
            "name": "py-pytest",
            "description": "pytest: simple powerful testing with Python."
        }
    ],
    "dependent_to": []
}