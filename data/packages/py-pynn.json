{
    "name": "py-pynn",
    "aliases": [],
    "versions": [
        {
            "name": "0.9.1",
            "sha256": "bbc60fea3235427191feb2daa0e2fa07eb1c3946104c068ac8a2a0501263b0b1"
        },
        {
            "name": "0.8.3",
            "sha256": "9d59e6cffa4714f0c892ec6b32d1f5f8f75ba3a20d8635bac50c047aa6f2537e"
        },
        {
            "name": "0.8beta",
            "commit": "ffb0cb1661f2b0f2778db8f71865978fe7a7a6a4"
        },
        {
            "name": "0.8.1",
            "sha256": "ce94246284588414d1570c1d5d697805f781384e771816727c830b01ee30fe39"
        },
        {
            "name": "0.7.5",
            "sha256": "15f75f422f3b71c6129ecef23f29d8baeb3ed6502e7a321b8a2596c78ef7e03c"
        }
    ],
    "build_system": "PythonPackage",
    "conflicts": [],
    "variants": [],
    "homepage": "http://neuralensemble.org/PyNN/",
    "maintainers": [
        "adamjstewart"
    ],
    "patches": [],
    "resources": [],
    "description": "A Python package for simulator-independent specification of neuronal\nnetwork models\n",
    "dependencies": [
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-jinja2",
            "description": "Jinja2 is a template engine written in pure Python. It provides a Django\ninspired non-XML syntax but supports inline expressions and an optional\nsandboxed environment."
        },
        {
            "name": "py-docutils",
            "description": "Docutils is an open-source text processing system for processing\nplaintext documentation into useful formats, such as HTML, LaTeX, man-\npages, open-document or XML. It includes reStructuredText, the easy to\nread, easy to use, what-you-see-is-what-you-get plaintext markup\nlanguage."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-quantities",
            "description": "Support for physical quantities with units, based on numpy"
        },
        {
            "name": "py-lazyarray",
            "description": "a Python package that provides a lazily-evaluated numerical array class,\nlarray, based on and compatible with NumPy arrays."
        },
        {
            "name": "py-neo",
            "description": "Neo is a package for representing electrophysiology data in Python,\ntogether with support for reading a wide range of neurophysiology file\nformats"
        }
    ],
    "dependent_to": []
}