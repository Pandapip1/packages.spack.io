{
    "name": "hypar",
    "aliases": [],
    "versions": [
        {
            "name": "4.1",
            "sha256": "36c11dcfda006115f4656ff73790992e5caea99dbc64776c9db4e0a29b4c60da"
        }
    ],
    "latest_version": "4.1",
    "build_system": "AutotoolsPackage",
    "conflicts": [
        {
            "name": "platform=windows",
            "spec": "build_system=autotools",
            "description": "None"
        }
    ],
    "variants": [
        {
            "name": "build_system",
            "default": "autotools",
            "description": "Build systems supported by the package"
        },
        {
            "name": "mpi",
            "default": true,
            "description": "Build with MPI support"
        },
        {
            "name": "openmp",
            "default": false,
            "description": "Build with OpenMP support"
        },
        {
            "name": "scalapack",
            "default": false,
            "description": "Build with Scalapack Support"
        },
        {
            "name": "fftw",
            "default": false,
            "description": "Build with FFTW support"
        }
    ],
    "homepage": "http://hypar.github.io/",
    "maintainers": [
        "debog"
    ],
    "patches": [],
    "resources": [],
    "description": " HyPar is a finite-difference algorithm to solve hyperbolic-parabolic\npartial differential equations (with source terms) on Cartesian grids.\nIt is a unified framework that can handle systems of PDEs with arbitrary\nnumber of spatial dimensions and solution components. It provides the\nspatial discretization and time integration functions, functions to read\nand write solutions from/to files, as well as functions required to\nsolve the system on parallel (MPI) platforms. The physical models define\nthe physics-specific functions such as the exact forms of the hyperbolic\nflux, parabolic flux, source terms, upwinding functions, etc.\n",
    "dependencies": [
        {
            "name": "gnuconfig",
            "description": "The GNU config.guess and config.sub scripts versioned by timestamp.\nThis package can be used as a build dependency for autotools packages\nthat ship a tarball with outdated config.guess and config.sub files."
        },
        {
            "name": "autoconf",
            "description": "Autoconf -- system configuration part of autotools"
        },
        {
            "name": "automake",
            "description": "Automake -- make file builder part of autotools"
        },
        {
            "name": "libtool",
            "description": "libtool -- library building part of autotools."
        },
        {
            "name": "mpi",
            "description": "Intel MPI Library is a multifabric message-passing library that\nimplements the open-source MPICH specification. Use the library to\ncreate, maintain, and test advanced, complex applications that perform\nbetter on high-performance computing (HPC) clusters based on Intel\nprocessors. LICENSE INFORMATION: By downloading and using this software,\nyou agree to the terms and conditions of the software license agreements\nat https://intel.ly/393CijO."
        },
        {
            "name": "scalapack",
            "description": "ScaLAPACK is a library of high-performance linear algebra routines for\nparallel distributed memory machines. It depends on external libraries\nincluding BLAS and LAPACK for Linear Algebra computations. AMD's\noptimized version of ScaLAPACK enables using BLIS and LibFLAME library\nthat have optimized dense matrix functions and solvers for AMD EPYC\nprocessor family CPUs. LICENSING INFORMATION: By downloading, installing\nand using this software, you agree to the terms and conditions of the\nAMD AOCL-ScaLAPACK license agreement. You may obtain a copy of this\nlicense agreement from\nhttps://www.amd.com/en/developer/aocl/scalapack/scalapack-\nlibraries-4-0-eula.html\nhttps://www.amd.com/en/developer/aocl/scalapack/scalapack-libraries-\neula.html"
        },
        {
            "name": "blas",
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications."
        },
        {
            "name": "lapack",
            "description": "The NVIDIA HPC SDK is a comprehensive suite of compilers, libraries and\ntools essential to maximizing developer productivity and the performance\nand portability of HPC applications. The NVIDIA HPC SDK C, C++, and\nFortran compilers support GPU acceleration of HPC modeling and\nsimulation applications with standard C++ and Fortran, OpenACC\ndirectives, and CUDA. GPU-accelerated math libraries maximize\nperformance on common HPC algorithms, and optimized communications\nlibraries enable standards-based multi-GPU and scalable systems\nprogramming. Performance profiling and debugging tools simplify porting\nand optimization of HPC applications."
        },
        {
            "name": "fftw",
            "description": "FFTW is a C subroutine library for computing the discrete Fourier\ntransform (DFT) in one or more dimensions, of arbitrary input size, and\nof both real and complex data (as well as of even/odd data, i.e. the\ndiscrete cosine/sine transforms or DCT/DST). We believe that FFTW, which\nis free software, should become the FFT library of choice for most\napplications."
        }
    ],
    "dependent_to": []
}