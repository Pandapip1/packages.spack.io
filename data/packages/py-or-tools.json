{
    "name": "py-or-tools",
    "aliases": [],
    "versions": [
        {
            "name": "7.8",
            "sha256": "d93a9502b18af51902abd130ff5f23768fcf47e266e6d1f34b3586387aa2de68"
        }
    ],
    "latest_version": "7.8",
    "build_system": "CMakePackage",
    "conflicts": [],
    "variants": [
        {
            "name": "build_system",
            "default": "cmake",
            "description": "Build systems supported by the package"
        },
        {
            "name": "build_type",
            "default": "Release",
            "description": "CMake build type"
        },
        {
            "name": "ipo",
            "default": false,
            "description": "CMake interprocedural optimization"
        },
        {
            "name": "generator",
            "default": "make",
            "description": "the build system generator to use"
        }
    ],
    "homepage": "https://developers.google.com/optimization/",
    "maintainers": [],
    "patches": [],
    "resources": [],
    "description": "This project hosts operations research tools developed at Google and\nmade available as open source under the Apache 2.0 License.\n",
    "dependencies": [
        {
            "name": "cmake",
            "description": "A cross-platform, open-source build system. CMake is a family of tools\ndesigned to build, test and package software."
        },
        {
            "name": "gmake",
            "description": "GNU Make is a tool which controls the generation of executables and\nother non-source files of a program from the program's source files."
        },
        {
            "name": "ninja",
            "description": "Ninja is a small build system with a focus on speed. It differs from\nother build systems in two major respects: it is designed to have its\ninput files generated by a higher-level build system, and it is designed\nto run builds as fast as possible."
        },
        {
            "name": "py-pip",
            "description": "The PyPA recommended tool for installing Python packages."
        },
        {
            "name": "py-wheel",
            "description": "A built-package format for Python."
        },
        {
            "name": "py-setuptools",
            "description": "A Python utility that aids in the process of downloading, building,\nupgrading, installing, and uninstalling Python packages."
        },
        {
            "name": "py-numpy",
            "description": "NumPy is the fundamental package for scientific computing with Python.\nIt contains among other things: a powerful N-dimensional array object,\nsophisticated (broadcasting) functions, tools for integrating C/C++ and\nFortran code, and useful linear algebra, Fourier transform, and random\nnumber capabilities"
        },
        {
            "name": "py-protobuf",
            "description": "Protocol buffers are Google's language-neutral, platform-neutral,\nextensible mechanism for serializing structured data - think XML, but\nsmaller, faster, and simpler. You define how you want your data to be\nstructured once, then you can use special generated source code to\neasily write and read your structured data to and from a variety of data\nstreams and using a variety of languages."
        },
        {
            "name": "protobuf",
            "description": "Google's data interchange format."
        },
        {
            "name": "py-six",
            "description": "Python 2 and 3 compatibility utilities."
        },
        {
            "name": "gflags",
            "description": "The gflags package contains a C++ library that implements commandline\nflags processing. It includes built-in support for standard types such\nas string and the ability to define flags in the source file in which\nthey are used. Online documentation available at:\nhttps://gflags.github.io/gflags/"
        },
        {
            "name": "glog",
            "description": "C++ implementation of the Google logging module."
        },
        {
            "name": "abseil-cpp",
            "description": "Abseil Common Libraries (C++)"
        },
        {
            "name": "cbc",
            "description": "Cbc (Coin-or branch and cut) is an open-source mixed integer linear\nprogramming solver written in C++. It can be used as a callable library\nor using a stand-alone executable."
        },
        {
            "name": "cgl",
            "description": "The COIN-OR Cut Generation Library (Cgl) is a collection of cut\ngenerators that can be used with other COIN-OR packages that make use of\ncuts, such as, among others, the linear solver Clp or the mixed integer\nlinear programming solvers Cbc or BCP. Cgl uses the abstract class\nOsiSolverInterface (see Osi) to use or communicate with a solver. It\ndoes not directly call a solver."
        },
        {
            "name": "clp",
            "description": "Clp (Coin-or linear programming) is an open-source linear programming\nsolver written in C++."
        },
        {
            "name": "osi",
            "description": "Osi (Open Solver Interface) provides an abstract base class to a generic\nlinear programming (LP) solver, along with derived classes for specific\nsolvers. Many applications may be able to use the Osi to insulate\nthemselves from a specific LP solver. That is, programs written to the\nOSI standard may be linked to any solver with an OSI interface and\nshould produce correct results. The OSI has been significantly extended\ncompared to its first incarnation. Currently, the OSI supports linear\nprogramming solvers and has rudimentary support for integer programming."
        },
        {
            "name": "coinutils",
            "description": "CoinUtils is an open-source collection of classes and helper functions\nthat are generally useful to multiple COIN-OR projects."
        },
        {
            "name": "swig",
            "description": "SWIG is an interface compiler that connects programs written in C and\nC++ with scripting languages such as Perl, Python, Ruby, and Tcl. It\nworks by taking the declarations found in C/C++ header files and using\nthem to generate the wrapper code that scripting languages need to\naccess the underlying C/C++ code. In addition, SWIG provides a variety\nof customization features that let you tailor the wrapping process to\nsuit your application."
        },
        {
            "name": "python",
            "description": "The Python programming language."
        },
        {
            "name": "py-virtualenv",
            "description": "virtualenv is a tool to create isolated Python environments."
        },
        {
            "name": "scipoptsuite",
            "description": "The SCIP Optimization Suite is a toolbox for generating and solving\nmixed integer nonlinear programs, in particular mixed integer linear\nprograms, and constraint integer programs Note: A manual download is\nrequired for SCIP. Spack will search your current directory for the\ndownload file. Alternatively, add this file to a mirror so that Spack\ncan find it. For instructions on how to set up a mirror, see\nhttps://spack.readthedocs.io/en/latest/mirrors.html"
        }
    ],
    "dependent_to": [
        {
            "name": "py-seriate",
            "description": "This is a Python implementation of Seriation algorithm. Seriation is an\napproach for ordering elements in a set so that the sum of the\nsequential pairwise distances is minimal. We state this task as a\nTravelling Salesman Problem (TSP) and leverage the powerful Google's or-\ntools to do heavy-lifting. Since TSP is NP-hard, it is not possible to\ncalculate the precise solution for a big number of elements. However,\nthe or-tools' heuristics work very well in practice, and they are used\nin e.g. Google Maps."
        }
    ]
}